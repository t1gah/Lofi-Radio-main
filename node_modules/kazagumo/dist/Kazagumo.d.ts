import { EventEmitter } from 'events';
import { CreatePlayerOptions, KazagumoOptions as KazagumoOptionsOwO, KazagumoSearchOptions, KazagumoSearchResult, PlayerMovedChannels, PlayerMovedState } from './Modules/Interfaces';
import { Node, NodeOption, PlayerUpdate, Shoukaku, ShoukakuOptions, TrackExceptionEvent, TrackStuckEvent, WebSocketClosedEvent } from 'shoukaku';
import { Connector } from 'shoukaku/dist/src/connectors/Connector';
import { KazagumoPlayer } from './Managers/KazagumoPlayer';
import { KazagumoTrack } from './Managers/Supports/KazagumoTrack';
import { Snowflake } from 'discord.js';
export declare interface Kazagumo {
    /**
     * Emitted when a track is going to play.
     * @event Kazagumo#playerStart
     */
    on(event: 'playerStart', listener: (player: KazagumoPlayer, track: KazagumoTrack) => void): this;
    /**
     * Emitted when an error occured while resolving track.
     * @event Kazagumo#playerResolveError
     */
    on(event: 'playerResolveError', listener: (player: KazagumoPlayer, track: KazagumoTrack, message?: string) => void): this;
    /**
     * Emitted when a player got destroyed.
     * @event Kazagumo#playerDestroy
     */
    on(event: 'playerDestroy', listener: (player: KazagumoPlayer) => void): this;
    /**
     * Emitted when a player created.
     * @event Kazagumo#playerCreate
     */
    on(event: 'playerCreate', listener: (player: KazagumoPlayer) => void): this;
    /**
     * Emitted when a track ended.
     * @event Kazagumo#playerEnd
     */
    on(event: 'playerEnd', listener: (player: KazagumoPlayer) => void): this;
    /**
     * Emitted when a player got empty.
     * @event Kazagumo#playerEmpty
     */
    on(event: 'playerEmpty', listener: (player: KazagumoPlayer) => void): this;
    /**
     * Emitted when a player got closed.
     * @event Kazagumo#playerClosed
     */
    on(event: 'playerClosed', listener: (player: KazagumoPlayer, data: WebSocketClosedEvent) => void): this;
    /**
     * Emitted when a player got stuck.
     * @event Kazagumo#playerStuck
     */
    on(event: 'playerStuck', listener: (player: KazagumoPlayer, data: TrackStuckEvent) => void): this;
    /**
     * Emitted when a player got resumed.
     * @event Kazagumo#playerResumed
     */
    on(event: 'playerResumed', listener: (player: KazagumoPlayer) => void): this;
    /**
     * Emitted only when you use playerMoved plugin and when the bot moved, joined, or left voice channel.
     * @event Kazagumo#playerMoved
     */
    on(event: 'playerMoved', listener: (player: KazagumoPlayer, state: PlayerMovedState, channels: PlayerMovedChannels) => void): this;
    /**
     * Emitted when an exception occured.
     * @event Kazagumo#playerException
     */
    on(event: 'playerException', listener: (player: KazagumoPlayer, data: TrackExceptionEvent) => void): this;
    /**
     * Emitted when a player updated.
     * @event Kazagumo#playerUpdate
     */
    on(event: 'playerUpdate', listener: (player: KazagumoPlayer, data: PlayerUpdate) => void): this;
    /**
     * Emitted for science purpose.
     * @event Kazagumo#playerUpdate
     */
    on(event: 'playerUpdate', listener: (data: unknown) => void): this;
    once(event: 'playerStart', listener: (player: KazagumoPlayer, track: KazagumoTrack) => void): this;
    once(event: 'playerResolveError', listener: (player: KazagumoPlayer, track: KazagumoTrack, message?: string) => void): this;
    once(event: 'playerDestroy', listener: (player: KazagumoPlayer) => void): this;
    once(event: 'playerCreate', listener: (player: KazagumoPlayer) => void): this;
    once(event: 'playerEnd', listener: (player: KazagumoPlayer) => void): this;
    once(event: 'playerEmpty', listener: (player: KazagumoPlayer) => void): this;
    once(event: 'playerClosed', listener: (player: KazagumoPlayer, data: WebSocketClosedEvent) => void): this;
    once(event: 'playerStuck', listener: (player: KazagumoPlayer, data: TrackStuckEvent) => void): this;
    once(event: 'playerResumed', listener: (player: KazagumoPlayer) => void): this;
    once(event: 'playerMoved', listener: (player: KazagumoPlayer, state: PlayerMovedState, channels: PlayerMovedChannels) => void): this;
    once(event: 'playerException', listener: (player: KazagumoPlayer, data: TrackExceptionEvent) => void): this;
    once(event: 'playerUpdate', listener: (player: KazagumoPlayer, data: PlayerUpdate) => void): this;
    once(event: 'playerUpdate', listener: (data: unknown) => void): this;
    off(event: 'playerStart', listener: (player: KazagumoPlayer, track: KazagumoTrack) => void): this;
    off(event: 'playerResolveError', listener: (player: KazagumoPlayer, track: KazagumoTrack, message?: string) => void): this;
    off(event: 'playerDestroy', listener: (player: KazagumoPlayer) => void): this;
    off(event: 'playerCreate', listener: (player: KazagumoPlayer) => void): this;
    off(event: 'playerEnd', listener: (player: KazagumoPlayer) => void): this;
    off(event: 'playerEmpty', listener: (player: KazagumoPlayer) => void): this;
    off(event: 'playerClosed', listener: (player: KazagumoPlayer, data: WebSocketClosedEvent) => void): this;
    off(event: 'playerStuck', listener: (player: KazagumoPlayer, data: TrackStuckEvent) => void): this;
    off(event: 'playerResumed', listener: (player: KazagumoPlayer) => void): this;
    off(event: 'playerMoved', listener: (player: KazagumoPlayer, state: PlayerMovedState, channels: PlayerMovedChannels) => void): this;
    off(event: 'playerException', listener: (player: KazagumoPlayer, data: TrackExceptionEvent) => void): this;
    off(event: 'playerUpdate', listener: (player: KazagumoPlayer, data: PlayerUpdate) => void): this;
    off(event: 'playerUpdate', listener: (data: unknown) => void): this;
}
export declare class Kazagumo extends EventEmitter {
    KazagumoOptions: KazagumoOptionsOwO;
    /** Shoukaku instance */
    shoukaku: Shoukaku;
    /** Kazagumo players */
    readonly players: Map<string, KazagumoPlayer>;
    /**
     * Initialize a Kazagumo instance.
     * @param KazagumoOptions KazagumoOptions
     * @param connector Connector
     * @param nodes NodeOption[]
     * @param options ShoukakuOptions
     */
    constructor(KazagumoOptions: KazagumoOptionsOwO, connector: Connector, nodes: NodeOption[], options?: ShoukakuOptions);
    /**
     * Create a player.
     * @param options CreatePlayerOptions
     * @returns Promise<KazagumoPlayer>
     */
    createPlayer<T extends KazagumoPlayer>(options: CreatePlayerOptions): Promise<T | KazagumoPlayer>;
    /**
     * Get a player by guildId.
     * @param guildId Guild ID
     * @returns KazagumoPlayer | undefined
     */
    getPlayer<T extends KazagumoPlayer>(guildId: Snowflake): (T | KazagumoPlayer) | undefined;
    /**
     * Destroy a player.
     * @param guildId Guild ID
     * @returns void
     */
    destroyPlayer<T extends KazagumoPlayer>(guildId: Snowflake): void;
    /**
     * Get a least used node.
     * @returns Node
     */
    getLeastUsedNode(): Node;
    /**
     * Search a track by query or uri.
     * @param query Query
     * @param options KazagumoOptions
     * @returns Promise<KazagumoSearchResult>
     */
    search(query: string, options?: KazagumoSearchOptions): Promise<KazagumoSearchResult>;
    private buildSearch;
}
