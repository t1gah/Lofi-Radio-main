import { EventEmitter } from 'events';
import Websocket from 'ws';

declare enum State {
    CONNECTING = 0,
    CONNECTED = 1,
    DISCONNECTING = 2,
    DISCONNECTED = 3
}
declare enum VoiceState {
    SESSION_READY = 0,
    SESSION_ID_MISSING = 1,
    SESSION_ENDPOINT_MISSING = 2
}
declare enum OPCodes {
    VOICE_UPDATE = "voiceUpdate",
    PLAY = "play",
    STOP = "stop",
    PAUSE = "pause",
    SEEK = "seek",
    VOLUME = "volume",
    FILTERS = "filters",
    DESTROY = "destroy",
    PLAYER_UPDATE = "playerUpdate",
    CONFIGURE_RESUMING = "configureResuming",
    STATS = "stats",
    EVENT = "event"
}
declare const ShoukakuDefaults: ShoukakuOptions;
declare const NodeDefaults: NodeOption;

declare const Constants_NodeDefaults: typeof NodeDefaults;
type Constants_OPCodes = OPCodes;
declare const Constants_OPCodes: typeof OPCodes;
declare const Constants_ShoukakuDefaults: typeof ShoukakuDefaults;
type Constants_State = State;
declare const Constants_State: typeof State;
type Constants_VoiceState = VoiceState;
declare const Constants_VoiceState: typeof VoiceState;
declare namespace Constants {
  export {
    Constants_NodeDefaults as NodeDefaults,
    Constants_OPCodes as OPCodes,
    Constants_ShoukakuDefaults as ShoukakuDefaults,
    Constants_State as State,
    Constants_VoiceState as VoiceState,
  };
}

/**
 * Represents the partial payload from a stateUpdate event
 */
interface StateUpdatePartial {
    channel_id?: string;
    session_id?: string;
    self_deaf: boolean;
    self_mute: boolean;
}
/**
 * Represents the payload from a serverUpdate event
 */
interface ServerUpdate {
    token: string;
    guild_id: string;
    endpoint: string;
}
/**
 * Represents a connection to a Discord voice channel
 */
declare class Connection extends EventEmitter {
    /**
     * An instance of the Player class
     */
    readonly player: Player;
    /**
     * ID of Guild that contains the connected voice channel
     */
    guildId: string;
    /**
     * ID of the connected voice channel
     */
    channelId: string | null;
    /**
     * ID of the Shard that contains the guild that contains the connected voice channel
     */
    shardId: number;
    /**
     * ID of current session
     */
    sessionId: string | null;
    /**
     * Region of connected voice channel
     */
    region: string | null;
    /**
     * Mute status in connected voice channel
     */
    muted: boolean;
    /**
     * Deafen status in connected voice channel
     */
    deafened: boolean;
    /**
     * Connection state
     */
    state: State;
    /**
     * Boolean that indicates if voice channel changed since initial connection
     */
    moved: boolean;
    /**
     * Boolean that indicates if this instance is reconnecting
     */
    reconnecting: boolean;
    /**
     * Cached serverUpdate event from Lavalink
     */
    private serverUpdate;
    /**
     * @param player Shoukaku Player class
     * @param options.guildId Guild ID in which voice channel to connect to is located
     * @param options.shardId Shard ID in which the guild exists
     * @param options.channelId Channel ID of voice channel to connect to
     * @param options.deaf Optional boolean value to specify whether to deafen the current bot user
     * @param options.mute Optional boolean value to specify whether to mute the current bot user
     */
    constructor(player: Player, options: VoiceChannelOptions);
    /**
     * Set the deafen status for the current bot user
     * @param deaf Boolean value to indicate whether to deafen or undeafen
     * @defaultValue false
     */
    setDeaf(deaf?: boolean): void;
    /**
     * Set the mute status for the current bot user
     * @param mute Boolean value to indicate whether to mute or unmute
     * @defaultValue false
     */
    setMute(mute?: boolean): void;
    /**
     * Disconnect the current bot user from the connected voice channel
     */
    disconnect(): void;
    /**
     * Connect the current bot user to a voice channel
     *
     * @param options.guildId Guild ID in which voice channel to connect to is located
     * @param options.shardId Unused parameter
     * @param options.channelId Channel ID of voice channel to connect to
     * @param options.deaf Optional boolean value to specify whether to deafen or undeafen the current bot user
     * @param options.mute Optional boolean value to specify whether to mute or unmute the current bot user
     */
    connect(options: VoiceChannelOptions): Promise<void>;
    /**
     * Update Session ID, Channel ID, Deafen status and Mute status of this instance
     *
     * @param options.session_id ID of this session
     * @param options.channel_id ID of currently connected voice channel
     * @param options.self_deaf Boolean that indicates if the current bot user is deafened or not
     * @param options.self_mute Boolean that indicates if the current bot user is muted or not
     * @internal
     */
    setStateUpdate(options: StateUpdatePartial): void;
    /**
     * Send voiceUpdate event to Lavalink and also cache the serverUpdate event from Discord
     * @internal
     */
    setServerUpdate(data: ServerUpdate): void;
    /**
     * Send voiceUpdate to Lavalink again
     * @internal
     */
    resendServerUpdate(): void;
    /**
     * Destroy the current Lavalink player
     */
    destroyLavalinkPlayer(): void;
    /**
     * Send data to Discord
     * @param data The data to send
     * @param important Whether to prioritize sending this packet in the queue
     * @internal
     */
    private send;
}

type TrackEndReason = 'FINISHED' | 'LOAD_FAILED' | 'STOPPED' | 'REPLACED' | 'CLEANUP';
type Severity = 'COMMON' | 'SUSPICIOUS' | 'FAULT';
type PlayerEventType = 'TrackStartEvent' | 'TrackEndEvent' | 'TrackExceptionEvent' | 'TrackStuckEvent' | 'WebSocketClosedEvent';
/**
 * Options when playing a new track
 */
interface PlayOptions {
    track: string;
    options?: {
        noReplace?: boolean;
        pause?: boolean;
        startTime?: number;
        endTime?: number;
    };
}
interface PlayPayload {
    op: string;
    guildId: string;
    track: string;
    noReplace: boolean;
    pause: boolean;
    startTime?: number;
    endTime?: number;
}
interface ResumeOptions {
    noReplace?: boolean;
    pause?: boolean;
    startTime?: number;
    endtime?: number;
}
interface Band {
    band: number;
    gain: number;
}
interface KaraokeSettings {
    level?: number;
    monoLevel?: number;
    filterBand?: number;
    filterWidth?: number;
}
interface TimescaleSettings {
    speed?: number;
    pitch?: number;
    rate?: number;
}
interface FreqSettings {
    frequency?: number;
    depth?: number;
}
interface RotationSettings {
    rotationHz?: number;
}
interface DistortionSettings {
    sinOffset?: number;
    sinScale?: number;
    cosOffset?: number;
    cosScale?: number;
    tanOffset?: number;
    tanScale?: number;
    offset?: number;
    scale?: number;
}
interface ChannelMixSettings {
    leftToLeft?: number;
    leftToRight?: number;
    rightToLeft?: number;
    rightToRight?: number;
}
interface LowPassSettings {
    smoothing?: number;
}
interface PlayerEvent {
    op: OPCodes.EVENT;
    type: PlayerEventType;
    guildId: string;
}
interface Exception {
    severity: Severity;
    message: string;
    cause: string;
}
interface TrackStartEvent extends PlayerEvent {
    type: 'TrackStartEvent';
    track: string;
}
interface TrackEndEvent extends PlayerEvent {
    type: 'TrackEndEvent';
    track: string;
    reason: TrackEndReason;
}
interface TrackExceptionEvent extends PlayerEvent {
    type: 'TrackExceptionEvent';
    exception?: Exception;
    error: string;
}
interface TrackStuckEvent extends PlayerEvent {
    type: 'TrackStuckEvent';
    track: string;
    thresholdMs: number;
}
interface TrackStuckEvent extends PlayerEvent {
    type: 'TrackStuckEvent';
    thresholdMs: number;
}
interface WebSocketClosedEvent extends PlayerEvent {
    type: 'WebSocketClosedEvent';
    code: number;
    byRemote: boolean;
    reason: string;
}
interface PlayerUpdate {
    op: OPCodes.PLAYER_UPDATE;
    state: {
        connected: boolean;
        position?: number;
        time: number;
    };
    guildId: string;
}
interface FilterOptions {
    volume?: number;
    equalizer?: Band[];
    karaoke?: KaraokeSettings | null;
    timescale?: TimescaleSettings | null;
    tremolo?: FreqSettings | null;
    vibrato?: FreqSettings | null;
    rotation?: RotationSettings | null;
    distortion?: DistortionSettings | null;
    channelMix?: ChannelMixSettings | null;
    lowPass?: LowPassSettings | null;
}
/**
 * Lavalink filters
 */
declare class Filters {
    volume: number;
    equalizer: Band[];
    karaoke: KaraokeSettings | null;
    timescale: TimescaleSettings | null;
    tremolo: FreqSettings | null;
    vibrato: FreqSettings | null;
    rotation: RotationSettings | null;
    distortion: DistortionSettings | null;
    channelMix: ChannelMixSettings | null;
    lowPass: LowPassSettings | null;
    /**
     * Options to initialize this filters instance with
     * @param options.volume The volume to play audio at as a decimal
     * @param options.equalizer An array of objects that conforms to the Bands type that define volumes at different frequencies
     * @param options.karaoke An object that conforms to the KaraokeSettings type that defines a range of frequencies to mute
     * @param options.timescale An object that conforms to the TimescaleSettings type that defines the time signature to play the audio at
     * @param options.tremolo An object that conforms to the FreqSettings type that defines an ocillation in volume
     * @param options.vibrato An object that conforms to the FreqSettings type that defines an ocillation in pitch
     * @param options.rotation An object that conforms to the RotationSettings type that defines the frequency of audio rotating round the listener
     * @param options.distortion An object that conforms to DistortionSettings that defines distortions in the audio
     * @param options.channelMix An object that conforms to ChannelMixSettings that defines how much the left and right channels affect each other (setting all factors to 0.5 causes both channels to get the same audio)
     * @param options.lowPass An object that conforms to LowPassSettings that defines the amount of suppression on higher frequencies
     */
    constructor(options?: FilterOptions);
}
declare interface Player {
    /**
     * Emitted when the current playing track ends
     * @eventProperty
     */
    on(event: 'end', listener: (reason: TrackEndEvent) => void): this;
    /**
     * Emitted when the current playing track gets stuck due to an error
     * @eventProperty
     */
    on(event: 'stuck', listener: (data: TrackStuckEvent) => void): this;
    /**
     * Emitted when the current websocket connection is closed
     * @eventProperty
     */
    on(event: 'closed', listener: (reason: WebSocketClosedEvent) => void): this;
    /**
     * Emitted when a new track starts
     * @eventProperty
     */
    on(event: 'start', listener: (data: TrackStartEvent) => void): this;
    /**
     * Emitted when there is an error caused by the current playing track
     * @eventProperty
     */
    on(event: 'exception', listener: (reason: TrackExceptionEvent) => void): this;
    /**
     * Emitted when the library manages to resume the player
     * @eventProperty
     */
    on(event: 'resumed', listener: () => void): this;
    /**
     * Emitted when a playerUpdate even is recieved from Lavalink
     * @eventProperty
     */
    on(event: 'update', listener: (data: PlayerUpdate) => void): this;
    once(event: 'end', listener: (reason: TrackEndEvent) => void): this;
    once(event: 'stuck', listener: (data: TrackStuckEvent) => void): this;
    once(event: 'closed', listener: (reason: WebSocketClosedEvent) => void): this;
    once(event: 'start', listener: (data: TrackStartEvent) => void): this;
    once(event: 'exception', listener: (reason: TrackExceptionEvent) => void): this;
    once(event: 'resumed', listener: () => void): this;
    once(event: 'update', listener: (data: PlayerUpdate) => void): this;
    off(event: 'end', listener: (reason: TrackEndEvent) => void): this;
    off(event: 'stuck', listener: (data: TrackStuckEvent) => void): this;
    off(event: 'closed', listener: (reason: WebSocketClosedEvent) => void): this;
    off(event: 'start', listener: (data: TrackStartEvent) => void): this;
    off(event: 'exception', listener: (reason: TrackExceptionEvent) => void): this;
    off(event: 'resumed', listener: () => void): this;
    off(event: 'update', listener: (data: PlayerUpdate) => void): this;
}
/**
 * Wrapper object around Lavalink
 */
declare class Player extends EventEmitter {
    /**
     * Lavalink node this player is connected to
     */
    node: Node;
    /**
     * Discort voice channel that this player is connected to
     */
    readonly connection: Connection;
    /**
     * ID of current track
     */
    track: string | null;
    /**
     * Pause status in current player
     */
    paused: boolean;
    /**
     * Ping represents the number of milliseconds between heartbeat and ack. Could be `-1` if not connected
     */
    ping: number;
    /**
     * Position in ms of current track
     */
    position: number;
    /**
     * Filters on current track
     */
    filters: Filters;
    /**
     * @param node An instance of Node (Lavalink API wrapper)
     * @param options.guildId Guild ID in which voice channel to connect to is located
     * @param options.shardId Shard ID in which the guild exists
     * @param options.channelId Channel ID of voice channel to connect to
     * @param options.deaf Optional boolean value to specify whether to deafen the current bot user
     * @param options.mute Optional boolean value to specify whether to mute the current bot user
     */
    constructor(node: Node, options: VoiceChannelOptions);
    /**
     * Move player to another node
     * @param name Name of node to move to
     * @returns The current player instance
     */
    move(name: string): Player;
    /**
     * Play a new track
     * @param playable Options for playing this track
     * @returns The current player instance
     */
    playTrack(playable: PlayOptions): Player;
    /**
     * Stop the currently playing track
     * @returns The current player instance
     */
    stopTrack(): Player;
    /**
     * Pause or unpause the currently playing track
     * @param pause Boolean value to specify whether to pause or unpause the current bot user
     * @returns The current player instance
     */
    setPaused(pause?: boolean): Player;
    /**
     * Seek to a specific time in the currently playing track
     * @param position Position to seek to in milliseconds
     * @returns The current player instance
     */
    seekTo(position: number): Player;
    /**
     * Change the volume of the currently playing track
     * @param volume Target volume as a decimal
     * @returns The current player instance
     */
    setVolume(volume: number): Player;
    /**
     * Change the equalizer settings applied to the currently playing track
     * @param bands An array of objects that conforms to the Bands type that define volumes at different frequencies
     * @returns The current player instance
     */
    setEqualizer(bands: Band[]): Player;
    /**
     * Change the karaoke settings applied to the currently playing track
     * @param karaoke An object that conforms to the KaraokeSettings type that defines a range of frequencies to mute
     * @returns The current player instance
     */
    setKaraoke(karaoke?: KaraokeSettings): Player;
    /**
     * Change the timescale settings applied to the currently playing track
     * @param timescale An object that conforms to the TimescaleSettings type that defines the time signature to play the audio at
     * @returns The current player instance
     */
    setTimescale(timescale?: TimescaleSettings): Player;
    /**
     * Change the tremolo settings applied to the currently playing track
     * @param tremolo An object that conforms to the FreqSettings type that defines an ocillation in volume
     * @returns The current player instance
     */
    setTremolo(tremolo?: FreqSettings): Player;
    /**
     * Change the vibrato settings applied to the currently playing track
     * @param vibrato An object that conforms to the FreqSettings type that defines an ocillation in pitch
     * @returns The current player instance
     */
    setVibrato(vibrato?: FreqSettings): Player;
    /**
     * Change the rotation settings applied to the currently playing track
     * @param rotation An object that conforms to the RotationSettings type that defines the frequency of audio rotating round the listener
     * @returns The current player instance
     */
    setRotation(rotation?: RotationSettings): Player;
    /**
     * Change the distortion settings applied to the currently playing track
     * @param distortion An object that conforms to DistortionSettings that defines distortions in the audio
     * @returns The current player instance
     */
    setDistortion(distortion: DistortionSettings): Player;
    /**
     * Change the channel mix settings applied to the currently playing track
     * @param mix An object that conforms to ChannelMixSettings that defines how much the left and right channels affect each other (setting all factors to 0.5 causes both channels to get the same audio)
     * @returns The current player instance
     */
    setChannelMix(mix: ChannelMixSettings): Player;
    /**
     * Change the low pass settings applied to the currently playing track
     * @param pass An object that conforms to LowPassSettings that defines the amount of suppression on higher frequencies
     * @returns The current player instance
     */
    setLowPass(pass: LowPassSettings): Player;
    /**
     * Change the all filter settings applied to the currently playing track
     * @param options An object that conforms to FilterOptions that defines all filters to apply/modify
     * @returns The current player instance
     */
    setFilters(options: FilterOptions): Player;
    /**
     * Clear all filters applied to the currently playing track
     * @returns The current player instance
     */
    clearFilters(): Player;
    /**
     * Resume the current track
     * @param options An object that conforms to ResumeOptions that specify behavior on resuming
     * @returns The current player instance
     */
    resume(options?: ResumeOptions): Player;
    /**
     * Update all filters via the filters operation
     * @internal
     */
    private updateFilters;
    /**
     * Remove all event listeners on this instance
     * @internal
     */
    clean(): void;
    /**
     * Reset the track, position and filters on this instance to defaults
     */
    reset(): void;
    /**
     * Handle JSON data recieved from Lavalink
     * @param json JSON data from Lavalink
     * @internal
     */
    onLavalinkMessage(json: any): void;
    /**
     * Handle player events recieved from Lavalink
     * @param json JSON data from Lavalink
     * @internal
     */
    private onPlayerEvent;
}

/**
 * Represents a message queue
 * @internal
 */
declare class Queue {
    /**
     * Node that initalized this message queue
     */
    private readonly node;
    /**
     * Pending messages
     */
    readonly pending: string[];
    /**
     * Number of flushes in this queue
     */
    private flushes;
    /**
     * @param node An instance of Node
     */
    constructor(node: Node);
    /**
     * Add data to queue
     * @param data Message data
     * @param important Priority status
     * @internal
     */
    add(data?: any, important?: boolean): void;
    /**
     * Clear the queue
     * @internal
     */
    clear(): void;
    /**
     * Flush the ws connections in queue
     * @param code Status code
     * @param reason Reason for close
     * @internal
     */
    flush(code: number, reason?: string): void;
    /**
     * Process messages in the queue
     * @internal
     */
    protected process(): void;
}

type LoadType = 'TRACK_LOADED' | 'PLAYLIST_LOADED' | 'SEARCH_RESULT' | 'NO_MATCHES' | 'LOAD_FAILED';
interface Track {
    track: string;
    info: {
        identifier: string;
        isSeekable: boolean;
        author: string;
        length: number;
        isStream: boolean;
        position: number;
        title: string;
        uri: string;
        sourceName: string;
    };
}
interface LavalinkResponse {
    loadType: LoadType;
    playlistInfo: {
        name?: string;
        selectedTrack?: number;
    };
    tracks: Track[];
}
interface Address {
    address: string;
    failingTimestamp: number;
    failingTime: string;
}
interface RoutePlanner {
    class?: string;
    details?: {
        ipBlock: {
            type: string;
            size: string;
        };
        failingAddresses: Address[];
    };
    rotateIndex?: string;
    ipIndex?: string;
    currentAddress?: string;
    blockIndex?: string;
    currentAddressIndex?: string;
}
/**
 * Wrapper around Lavalink REST API
 */
declare class Rest {
    /**
     * Node that initialized this instance
     */
    protected readonly node: Node;
    /**
     * URL of Lavalink
     */
    protected readonly url: string;
    /**
     * Credentials to access Lavalink
     */
    protected readonly auth: string;
    /**
     * @param node An instance of Node
     * @param options.name Name of this node
     * @param options.url URL of Lavalink
     * @param options.auth Credentials to access Lavalnk
     * @param options.secure Weather to use secure protocols or not
     * @param options.group Group of this node
     */
    constructor(node: Node, options: NodeOption);
    /**
     * Resolve a track
     * @param identifier Track ID
     * @returns A promise that resolves to a Lavalink response or void
     */
    resolve(identifier: string): Promise<LavalinkResponse | null>;
    /**
     * Decode a track
     * @param track Encoded track
     * @returns Promise that resolves to a track or void
     */
    decode(track: string): Promise<Track | null>;
    /**
     * Get routplanner status from Lavalink
     * @returns Promise that resolves to a routeplanner response or void
     * @internal
     */
    getRoutePlannerStatus(): Promise<RoutePlanner | null>;
    /**
     * Release blacklisted IP address into pool of IPs
     * @param address IP address
     * @internal
     */
    unmarkFailedAddress(address: string): Promise<void | null>;
    /**
     * Make a request to Lavalink
     * @param fetchOptions.endpoint Lavalink endpoint
     * @param fetchOptions.options Options passed to fetch
     * @internal
     */
    private fetch;
}

interface VoiceChannelOptions {
    guildId: string;
    shardId: number;
    channelId: string;
    deaf?: boolean;
    mute?: boolean;
}
interface NodeStats {
    players: number;
    playingPlayers: number;
    memory: {
        reservable: number;
        used: number;
        free: number;
        allocated: number;
    };
    frameStats: {
        sent: number;
        deficit: number;
        nulled: number;
    };
    cpu: {
        cores: number;
        systemLoad: number;
        lavalinkLoad: number;
    };
    uptime: number;
}
interface ResumableHeaders {
    [key: string]: string;
    'Client-Name': string;
    'User-Agent': string;
    'Authorization': string;
    'User-Id': string;
    'Resume-Key': string;
}
interface NonResumableHeaders {
    [key: string]: string;
    'Client-Name': string;
    'User-Agent': string;
    'Authorization': string;
    'User-Id': string;
}
/**
 * Represents a Lavalink node
 */
declare class Node extends EventEmitter {
    /**
     * Shoukaku class
     */
    readonly manager: Shoukaku;
    /**
     * A map of guild ID to players
     */
    readonly players: Map<string, Player>;
    /**
     * Lavalink rest API
     */
    readonly rest: Rest;
    /**
     * Lavalink API message queue
     */
    readonly queue: Queue;
    /**
     * Name of this node
     */
    readonly name: string;
    /**
     * Group in which this node is contained
     */
    readonly group?: string;
    /**
     * URL of Lavalink
     */
    private readonly url;
    /**
     * Credentials to access Lavalink
     */
    private readonly auth;
    /**
     * The number of reconnects to Lavalink
     */
    reconnects: number;
    /**
     * The state of this connection
     */
    state: State;
    /**
     * Statistics from Lavalink
     */
    stats: NodeStats | null;
    /**
     * Websocket instance
     */
    ws: Websocket | null;
    /**
     * Boolean that represents if the node has initialized once (will always be true when alwaysSendResumeKey is true)
     */
    protected initialized: boolean;
    /**
     * Boolean that represents if this connection is destroyed
     */
    protected destroyed: boolean;
    /**
     * @param manager Shoukaku instance
     * @param options.name Name of this node
     * @param options.url URL of Lavalink
     * @param options.auth Credentials to access Lavalnk
     * @param options.secure Whether to use secure protocols or not
     * @param options.group Group of this node
     */
    constructor(manager: Shoukaku, options: NodeOption);
    /**
     * Penalties for load balancing
     * @returns Penalty score
     * @internal @readonly
     */
    get penalties(): number;
    /**
     * Connect to Lavalink
     */
    connect(): void;
    /**
     * Disconnect from lavalink
     * @param code Status code
     * @param reason Reason for disconnect
     */
    disconnect(code: number, reason?: string): void;
    /**
     * Join a voice channel in a guild
     * @param options.guildId Guild ID in which voice channel to connect to is located
     * @param options.shardId Shard ID in which the guild exists
     * @param options.channelId Channel ID of voice channel to connect to
     * @param options.deaf Optional boolean value to specify whether to deafen the current bot user
     * @param options.mute Optional boolean value to specify whether to mute the current bot user
     * @returns A promise that resolves to a player class
     */
    joinChannel(options: VoiceChannelOptions): Promise<Player>;
    /**
     * Disconnect from connected voice channel
     * @param guildId ID of guild that contains voice channel
     */
    leaveChannel(guildId: string): void;
    /**
     * Handle connection open event from Lavalink
     * @param response Response from Lavalink
     * @param reconnect Whether to reconnect on failure
     * @internal
     */
    private open;
    /**
     * Handle message from Lavalink
     * @param message JSON message
     * @internal
     */
    private message;
    /**
     * Handle closed event from lavalink
     * @param code Status close
     * @param reason Reason for connection close
     */
    private close;
    /**
     * Destroys the websocket connection
     * @internal
     */
    private destroy;
    /**
     * Clear message queue and move players to other nodes if possible
     * @internal
     */
    private clean;
    /**
     * Reconnect to Lavalink
     * @internal
     */
    private reconnect;
    /**
     * Handle raw message from Discord
     * @param packet Packet data
     * @internal
     */
    discordRaw(packet: any): void;
}

type Constructor<T> = new (...args: any[]) => T;
/**
 * Merge the default options to user input
 * @param def Default options
 * @param given User input
 * @returns Merged options
 */
declare function mergeDefault<T extends {
    [key: string]: any;
}>(def: T, given: T): Required<T>;
/**
 * Wait for a specific amount of time (timeout)
 * @param ms Time to wait in milliseconds
 * @returns A promise that resolves in x seconds
 */
declare function wait(ms: number): Promise<void>;

type Utils_Constructor<T> = Constructor<T>;
declare const Utils_mergeDefault: typeof mergeDefault;
declare const Utils_wait: typeof wait;
declare namespace Utils {
  export {
    Utils_Constructor as Constructor,
    Utils_mergeDefault as mergeDefault,
    Utils_wait as wait,
  };
}

interface Structures {
    /**
     * A custom structure that extends the Rest class
     */
    rest?: Constructor<Rest>;
    /**
     * A custom structure that extends the Player class
     */
    player?: Constructor<Player>;
}
interface NodeOption {
    /**
     * Name of this node
     */
    name: string;
    /**
     * URL of Lavalink
     */
    url: string;
    /**
     * Credentials to access Lavalnk
     */
    auth: string;
    /**
     * Whether to use secure protocols or not
     */
    secure?: boolean;
    /**
     * Group of this node
     */
    group?: string;
}
interface ShoukakuOptions {
    /**
     * Whether to resume a connection on disconnect to Lavalink (Server Side) (Note: DOES NOT RESUME WHEN THE LAVALINK SERVER DIES)
     */
    resume?: boolean;
    /**
     * Resume key for Lavalink
     */
    resumeKey?: string;
    /**
     * Time to wait before lavalink starts to destroy the players of the disconnected client
     */
    resumeTimeout?: number;
    /**
     * Whether to resume the players by doing it in the library side (Client Side) (Note: TRIES TO RESUME REGARDLESS OF WHAT HAPPENED ON A LAVALINK SERVER)
     */
    resumeByLibrary?: boolean;
    /**
     * Disables the first time initialization tracking of nodes, and just sends the resume key always (Note: Useful for people who save their players to redis and wants to resume sessions even at first boot)
     */
    alwaysSendResumeKey?: boolean;
    /**
     * Number of times to try and reconnect to Lavalink before giving up
     */
    reconnectTries?: number;
    /**
     * Timeout before trying to reconnect
     */
    reconnectInterval?: number;
    /**
     * Time to wait for a response from the Lavalink REST API before giving up
     */
    restTimeout?: number;
    /**
     * Whether to move players to a different Lavalink node when a node disconnects
     */
    moveOnDisconnect?: boolean;
    /**
     * User Agent to use when making requests to Lavalink
     */
    userAgent?: string;
    /**
     * Custom structures for shoukaku to use
     */
    structures?: Structures;
}
interface MergedShoukakuOptions {
    resume: boolean;
    resumeKey: string;
    resumeTimeout: number;
    resumeByLibrary: boolean;
    alwaysSendResumeKey: boolean;
    reconnectTries: number;
    reconnectInterval: number;
    restTimeout: number;
    moveOnDisconnect: boolean;
    userAgent: string;
    structures: Structures;
}
declare interface Shoukaku {
    /**
     * Emitted when reconnect tries are occurring and how many tries are left
     * @eventProperty
     */
    on(event: 'reconnecting', listener: (name: string, info: string, tries: number, triesLeft: number, reconnectInterval: number) => void): this;
    /**
     * Emitted when data useful for debugging is produced
     * @eventProperty
     */
    on(event: 'debug', listener: (name: string, info: string) => void): this;
    /**
     * Emitted when an error occurs
     * @eventProperty
     */
    on(event: 'error', listener: (name: string, error: Error) => void): this;
    /**
     * Emitted when Shoukaku is ready to recieve operations
     * @eventProperty
     */
    on(event: 'ready', listener: (name: string, reconnected: boolean) => void): this;
    /**
     * Emitted when a websocket connection to Lavalink closes
     * @eventProperty
     */
    on(event: 'close', listener: (name: string, code: number, reason: string) => void): this;
    /**
     * Emitted when a websocket connection to Lavalink disconnects
     * @eventProperty
     */
    on(event: 'disconnect', listener: (name: string, players: Player[], moved: boolean) => void): this;
    /**
     * Emitted when a raw message is recived from Lavalink
     * @eventProperty
     */
    on(event: 'raw', listener: (name: string, json: unknown) => void): this;
    once(event: 'reconnecting', listener: (name: string, reconnectsLeft: number, reconnectInterval: number) => void): this;
    once(event: 'debug', listener: (name: string, info: string) => void): this;
    once(event: 'error', listener: (name: string, error: Error) => void): this;
    once(event: 'ready', listener: (name: string, reconnected: boolean) => void): this;
    once(event: 'close', listener: (name: string, code: number, reason: string) => void): this;
    once(event: 'disconnect', listener: (name: string, players: Player[], moved: boolean) => void): this;
    once(event: 'raw', listener: (name: string, json: unknown) => void): this;
    off(event: 'reconnecting', listener: (name: string, reconnectsLeft: number, reconnectInterval: number) => void): this;
    off(event: 'debug', listener: (name: string, info: string) => void): this;
    off(event: 'error', listener: (name: string, error: Error) => void): this;
    off(event: 'ready', listener: (name: string, reconnected: boolean) => void): this;
    off(event: 'close', listener: (name: string, code: number, reason: string) => void): this;
    off(event: 'disconnect', listener: (name: string, players: Player[], moved: boolean) => void): this;
    off(event: 'raw', listener: (name: string, json: unknown) => void): this;
}
/**
 * Main Shoukaku class
 */
declare class Shoukaku extends EventEmitter {
    /**
     * Discord library connector
     */
    readonly connector: Connector;
    /**
     * Shoukaku options
     */
    readonly options: MergedShoukakuOptions;
    /**
     * Connected Lavalink nodes
     */
    readonly nodes: Map<string, Node>;
    /**
     * Shoukaku instance identifier
     */
    id: string | null;
    /**
     * @param connector A Discord library connector
     * @param nodes An array that conforms to the NodeOption type that specifies nodes to connect to
     * @param options.resume Whether to resume a connection on disconnect to Lavalink (Server Side) (Note: DOES NOT RESUME WHEN THE LAVALINK SERVER DIES)
     * @param options.resumeKey Resume key for Lavalink
     * @param options.resumeTimeout Time to wait before lavalink starts to destroy the players of the disconnected client
     * @param options.resumeByLibrary Whether to resume the players by doing it in the library side (Client Side) (Note: TRIES TO RESUME REGARDLESS OF WHAT HAPPENED ON A LAVALINK SERVER)
     * @param options.alwaysSendResumeKey Disables the first time initialization tracking of nodes, and just sends the resume key always (Note: Useful for people who save their players to redis and wants to resume sessions even at first boot)
     * @param options.reconnectTries Number of times to try and reconnect to Lavalink before giving up
     * @param options.reconnectInterval Timeout before trying to reconnect
     * @param options.restTimeout Time to wait for a response from the Lavalink REST API before giving up
     * @param options.moveOnDisconnect Whether to move players to a different Lavalink node when a node disconnects
     * @param options.userAgent User Agent to use when making requests to Lavalink
     * @param options.structures Custom structures for shoukaku to use
     */
    constructor(connector: Connector, nodes: NodeOption[], options?: ShoukakuOptions);
    /**
     * Get a list of players
     * @returns A map of guild IDs and players
     * @readonly
     */
    get players(): Map<string, Player>;
    /**
     * Add a Lavalink node to the pool of available nodes
     * @param options.name Name of this node
     * @param options.url URL of Lavalink
     * @param options.auth Credentials to access Lavalnk
     * @param options.secure Whether to use secure protocols or not
     * @param options.group Group of this node
     */
    addNode(options: NodeOption): void;
    /**
     * Remove a Lavalink node from the pool of available nodes
     * @param name Name of the node
     * @param reason Reason of removing the node
     */
    removeNode(name: string, reason?: string): void;
    /**
     * Select a Lavalink node from the pool of nodes
     * @param name A specific node, an array of nodes, or the string `auto`
     * @returns A Lavalink node or undefined
     */
    getNode(name?: string | string[]): Node | undefined;
    /**
     * Get the Lavalink node the least penalty score
     * @param group A group, an array of groups, or the string `auto`
     * @returns A Lavalink node or undefined
     * @internal
     */
    private getIdeal;
}

interface ConnectorMethods {
    sendPacket: any;
    getId: any;
}
declare abstract class Connector {
    protected readonly client: any;
    protected manager: Shoukaku | null;
    constructor(client: any);
    set(manager: Shoukaku): Connector;
    protected ready(nodes: NodeOption[]): void;
    protected raw(packet: any): void;
    abstract getId(): string;
    abstract sendPacket(shardId: number, payload: any, important: boolean): void;
    abstract listen(nodes: NodeOption[]): void;
}

declare class DiscordJS extends Connector {
    sendPacket(shardId: number, payload: any, important: boolean): void;
    getId(): string;
    listen(nodes: NodeOption[]): void;
}

declare class Eris extends Connector {
    sendPacket(shardId: number, payload: any, important: boolean): void;
    getId(): string;
    listen(nodes: NodeOption[]): void;
}

declare class OceanicJS extends Connector {
    sendPacket(shardId: number, payload: any, important: boolean): void;
    getId(): string;
    listen(nodes: NodeOption[]): void;
}

type index_DiscordJS = DiscordJS;
declare const index_DiscordJS: typeof DiscordJS;
type index_Eris = Eris;
declare const index_Eris: typeof Eris;
type index_OceanicJS = OceanicJS;
declare const index_OceanicJS: typeof OceanicJS;
declare namespace index {
  export {
    index_DiscordJS as DiscordJS,
    index_Eris as Eris,
    index_OceanicJS as OceanicJS,
  };
}

export { Address, Band, ChannelMixSettings, Connection, Connector, ConnectorMethods, index as Connectors, Constants, DistortionSettings, Exception, FilterOptions, Filters, FreqSettings, KaraokeSettings, LavalinkResponse, LoadType, LowPassSettings, MergedShoukakuOptions, Node, NodeOption, NodeStats, NonResumableHeaders, PlayOptions, PlayPayload, Player, PlayerEvent, PlayerEventType, PlayerUpdate, Queue, Rest, ResumableHeaders, ResumeOptions, RotationSettings, RoutePlanner, ServerUpdate, Severity, Shoukaku, ShoukakuOptions, StateUpdatePartial, Structures, TimescaleSettings, Track, TrackEndEvent, TrackEndReason, TrackExceptionEvent, TrackStartEvent, TrackStuckEvent, Utils, VoiceChannelOptions, WebSocketClosedEvent };
