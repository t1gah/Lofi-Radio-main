{"version":3,"sources":["../src/connectors/libs/index.ts","../src/Constants.ts","../package.json","../src/Utils.ts","../src/connectors/Connector.ts","../src/connectors/libs/DiscordJS.ts","../src/connectors/libs/Eris.ts","../src/connectors/libs/OceanicJS.ts","../src/guild/Connection.ts","../src/guild/Player.ts","../src/node/Node.ts","../src/node/Queue.ts","../src/node/Rest.ts","../src/Shoukaku.ts"],"sourcesContent":["export * from './DiscordJS';\nexport * from './Eris';\nexport * from './OceanicJS';\n","import { NodeOption, ShoukakuOptions } from './Shoukaku';\nimport Info from '../package.json';\n\nexport enum State {\n    CONNECTING,\n    CONNECTED,\n    DISCONNECTING,\n    DISCONNECTED\n}\n\nexport enum VoiceState {\n    SESSION_READY,\n    SESSION_ID_MISSING,\n    SESSION_ENDPOINT_MISSING\n}\n\nexport enum OPCodes {\n    // From Lavalink\n    VOICE_UPDATE = 'voiceUpdate',\n    PLAY = 'play',\n    STOP = 'stop',\n    PAUSE = 'pause',\n    SEEK = 'seek',\n    VOLUME = 'volume',\n    FILTERS = 'filters',\n    DESTROY = 'destroy',\n    // To Lavalink\n    PLAYER_UPDATE = 'playerUpdate',\n    CONFIGURE_RESUMING = 'configureResuming',\n    STATS = 'stats',\n    EVENT = 'event'\n}\n\nexport const ShoukakuDefaults: ShoukakuOptions = {\n    resume: false,\n    resumeKey: `Shoukaku@${Info.version}(${Info.repository.url})`,\n    resumeTimeout: 30000,\n    resumeByLibrary: false,\n    alwaysSendResumeKey: false,\n    reconnectTries: 3,\n    reconnectInterval: 5000,\n    restTimeout: 60000,\n    moveOnDisconnect: false,\n    userAgent: `${Info.name}bot/${Info.version} (${Info.repository.url})`,\n    structures: {}\n};\n\nexport const NodeDefaults: NodeOption = {\n    name: 'Default',\n    url: '',\n    auth: '',\n    secure: false,\n    group: undefined\n};\n","{\n  \"name\": \"shoukaku\",\n  \"version\": \"3.4.0\",\n  \"description\": \"A stable and updated wrapper around Lavalink\",\n  \"main\": \"dist/index.js\",\n  \"module\": \"dist/index.mjs\",\n  \"types\": \"dist/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"import\": \"./dist/index.mjs\",\n      \"require\": \"./dist/index.js\"\n    }\n  },\n  \"scripts\": {\n    \"build\": \"npm run build:ts && npm run build:docs\",\n    \"build:ts\": \"tsup --config tsup-config.json\",\n    \"build:docs\": \"typedoc --theme default --readme README.md --out docs/ --entryPointStrategy expand src/.\",\n    \"prepare\": \"npm run build:ts\"\n  },\n  \"keywords\": [\n    \"bot\",\n    \"music\",\n    \"lavalink\",\n    \"api\",\n    \"discord\",\n    \"lavalink.js\",\n    \"discord.js\",\n    \"lavalink-api\",\n    \"weeb-library\"\n  ],\n  \"engines\": {\n    \"node\": \">=16.0.0\",\n    \"npm\": \">=7.0.0\"\n  },\n  \"author\": \"Saya\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/Deivu/Shoukaku\"\n  },\n  \"dependencies\": {\n    \"node-fetch\": \"^2.6.9\",\n    \"ws\": \"^8.13.0\"\n  },\n  \"devDependencies\": {\n    \"@augu/eslint-config\": \"^4.0.1\",\n    \"@types/node\": \"^18.16.1\",\n    \"@types/node-fetch\": \"^2.6.3\",\n    \"@types/ws\": \"^8.5.4\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.59.1\",\n    \"@typescript-eslint/parser\": \"^5.59.1\",\n    \"eslint\": \"^8.39.0\",\n    \"tsup\": \"^6.7.0\",\n    \"typedoc\": \"^0.24.6\",\n    \"typescript\": \"^5.0.4\"\n  }\n}\n","export type Constructor<T> = new (...args: any[]) => T;\n/**\n * Merge the default options to user input\n * @param def Default options\n * @param given User input\n * @returns Merged options\n */\nexport function mergeDefault<T extends { [key: string]: any }>(def: T, given: T): Required<T> {\n    if (!given) return def as Required<T>;\n    const defaultKeys: (keyof T)[] = Object.keys(def);\n    for (const key in given) {\n        if (defaultKeys.includes(key)) continue;\n        delete given[key];\n    }\n    for (const key of defaultKeys) {\n        if (def[key] === null || (typeof def[key] === 'string' && def[key].length === 0)) {\n            if (!given[key]) throw new Error(`${String(key)} was not found from the given options.`);\n        }\n        if (given[key] === null || given[key] === undefined) given[key] = def[key];\n    }\n    return given as Required<T>;\n}\n\n/**\n * Wait for a specific amount of time (timeout)\n * @param ms Time to wait in milliseconds\n * @returns A promise that resolves in x seconds\n */\nexport function wait(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import { NodeOption, Shoukaku } from '../Shoukaku';\nimport { NodeDefaults } from '../Constants';\nimport { mergeDefault } from '../Utils';\n\nexport interface ConnectorMethods {\n    sendPacket: any;\n    getId: any;\n}\n\nexport abstract class Connector {\n    protected readonly client: any;\n    protected manager: Shoukaku|null;\n    constructor(client: any) {\n        this.client = client;\n        this.manager = null;\n    }\n\n    public set(manager: Shoukaku): Connector {\n        this.manager = manager;\n        return this;\n    }\n\n    protected ready(nodes: NodeOption[]): void {\n        this.manager!.id = this.getId();\n        this.manager!.emit('debug', 'Manager', `[Manager] : Connecting ${nodes.length} nodes`);\n        for (const node of nodes) this.manager!.addNode(mergeDefault(NodeDefaults, node));\n    }\n\n    protected raw(packet: any): void {\n        if (!['VOICE_STATE_UPDATE', 'VOICE_SERVER_UPDATE'].includes(packet.t)) return;\n        for (const node of this.manager!.nodes.values()) node.discordRaw(packet);\n    }\n\n    abstract getId(): string;\n\n    abstract sendPacket(shardId: number, payload: any, important: boolean): void;\n\n    abstract listen(nodes: NodeOption[]): void;\n}\n","import { Connector } from '../Connector';\nimport { NodeOption } from '../../Shoukaku';\n\nexport class DiscordJS extends Connector {\n    // sendPacket is where your library send packets to Discord Gateway\n    public sendPacket(shardId: number, payload: any, important: boolean): void {\n        return this.client.ws.shards.get(shardId)?.send(payload, important);\n    }\n    // getId is a getter where the lib stores the client user (the one logged in as a bot) id\n    public getId(): string {\n        return this.client.user.id;\n    }\n    // Listen attaches the event listener to the library you are using\n    public listen(nodes: NodeOption[]): void {\n        // Only attach to ready event once, refer to your library for its ready event\n        this.client.once('ready', () => this.ready(nodes));\n        // Attach to the raw websocket event, this event must be 1:1 on spec with dapi (most libs implement this)\n        this.client.on('raw', (packet: any) => this.raw(packet));\n    }\n}\n","import { Connector } from '../Connector';\nimport { NodeOption } from '../../Shoukaku';\n\nexport class Eris extends Connector {\n    // sendPacket is where your library send packets to Discord Gateway\n    public sendPacket(shardId: number, payload: any, important: boolean): void {\n        return this.client.shards.get(shardId)?.sendWS(payload.op, payload.d, important);\n    }\n    // getId is a getter where the lib stores the client user (the one logged in as a bot) id\n    public getId(): string {\n        return this.client.user.id;\n    }\n    // Listen attaches the event listener to the library you are using\n    public listen(nodes: NodeOption[]): void {\n        // Only attach to ready event once, refer to your library for its ready event\n        this.client.once('ready', () => this.ready(nodes));\n        // Attach to the raw websocket event, this event must be 1:1 on spec with dapi (most libs implement this)\n        this.client.on('rawWS', (packet: any) => this.raw(packet));\n    }\n}\n","import { Connector } from '../Connector';\nimport { NodeOption } from '../../Shoukaku';\n\nexport class OceanicJS extends Connector {\n    // sendPacket is where your library send packets to Discord Gateway\n    public sendPacket(shardId: number, payload: any, important: boolean): void {\n        return this.client.shards.get(shardId)?.send(payload.op, payload.d, important);\n    }\n    // getId is a getter where the lib stores the client user (the one logged in as a bot) id\n    public getId(): string {\n        return this.client.user.id;\n    }\n    // Listen attaches the event listener to the library you are using\n    public listen(nodes: NodeOption[]): void {\n        // Only attach to ready event once, refer to your library for its ready event\n        this.client.once('ready', () => this.ready(nodes));\n        // Attach to the raw websocket event, this event must be 1:1 on spec with dapi (most libs implement this)\n        this.client.on('packet', (packet: any) => this.raw(packet));\n    }\n}\n","import { EventEmitter, once } from 'events';\nimport { OPCodes, State, VoiceState } from '../Constants';\nimport { VoiceChannelOptions } from '../node/Node';\nimport { Player } from './Player';\n\n/**\n * Represents the partial payload from a stateUpdate event\n */\nexport interface StateUpdatePartial {\n    channel_id?: string;\n    session_id?: string;\n    self_deaf: boolean;\n    self_mute: boolean;\n}\n\n/**\n * Represents the payload from a serverUpdate event\n */\nexport interface ServerUpdate {\n    token: string;\n    guild_id: string;\n    endpoint: string;\n}\n\n/**\n * Represents a connection to a Discord voice channel\n */\nexport class Connection extends EventEmitter {\n    /**\n     * An instance of the Player class\n     */\n    public readonly player: Player;\n    /**\n     * ID of Guild that contains the connected voice channel\n     */\n    public guildId: string;\n    /**\n     * ID of the connected voice channel\n     */\n    public channelId: string|null;\n    /**\n     * ID of the Shard that contains the guild that contains the connected voice channel\n     */\n    public shardId: number;\n    /**\n     * ID of current session\n     */\n    public sessionId: string|null;\n    /**\n     * Region of connected voice channel\n     */\n    public region: string|null;\n    /**\n     * Mute status in connected voice channel\n     */\n    public muted: boolean;\n    /**\n     * Deafen status in connected voice channel\n     */\n    public deafened: boolean;\n    /**\n     * Connection state\n     */\n    public state: State;\n    /**\n     * Boolean that indicates if voice channel changed since initial connection\n     */\n    public moved: boolean;\n    /**\n     * Boolean that indicates if this instance is reconnecting\n     */\n    public reconnecting: boolean;\n    /**\n     * Cached serverUpdate event from Lavalink\n     */\n    private serverUpdate: ServerUpdate|null;\n    /**\n     * @param player Shoukaku Player class\n     * @param options.guildId Guild ID in which voice channel to connect to is located\n     * @param options.shardId Shard ID in which the guild exists\n     * @param options.channelId Channel ID of voice channel to connect to\n     * @param options.deaf Optional boolean value to specify whether to deafen the current bot user\n     * @param options.mute Optional boolean value to specify whether to mute the current bot user\n     */\n    constructor(player: Player, options: VoiceChannelOptions) {\n        super();\n        this.player = player;\n        this.guildId = options.guildId;\n        this.channelId = null;\n        this.shardId = options.shardId;\n        this.sessionId = null;\n        this.region = null;\n        this.muted = false;\n        this.deafened = false;\n        this.state = State.DISCONNECTED;\n        this.moved = false;\n        this.reconnecting = false;\n        this.serverUpdate = null;\n    }\n\n    /**\n     * Set the deafen status for the current bot user\n     * @param deaf Boolean value to indicate whether to deafen or undeafen\n     * @defaultValue false\n     */\n    public setDeaf(deaf = false): void {\n        this.deafened = deaf;\n        this.send({ guild_id: this.guildId, channel_id: this.channelId, self_deaf: this.deafened, self_mute: this.muted }, false);\n    }\n\n    /**\n     * Set the mute status for the current bot user\n     * @param mute Boolean value to indicate whether to mute or unmute\n     * @defaultValue false\n     */\n    public setMute(mute = false): void {\n        this.muted = mute;\n        this.send({ guild_id: this.guildId, channel_id: this.channelId, self_deaf: this.deafened, self_mute: this.muted }, false);\n    }\n\n    /**\n     * Disconnect the current bot user from the connected voice channel\n     */\n    public disconnect(): void {\n        if (this.state !== State.DISCONNECTED) {\n            this.state = State.DISCONNECTING;\n            this.send({ guild_id: this.guildId, channel_id: null, self_mute: false, self_deaf: false }, false);\n        }\n        this.player.node.players.delete(this.guildId);\n        this.player.clean();\n        this.destroyLavalinkPlayer();\n        this.state = State.DISCONNECTED;\n        this.player.node.emit('debug', this.player.node.name, `[Voice] -> [Node] & [Discord] : Link & Player Destroyed | Guild: ${this.guildId}`);\n    }\n\n    /**\n     * Connect the current bot user to a voice channel\n     *\n     * @param options.guildId Guild ID in which voice channel to connect to is located\n     * @param options.shardId Unused parameter\n     * @param options.channelId Channel ID of voice channel to connect to\n     * @param options.deaf Optional boolean value to specify whether to deafen or undeafen the current bot user\n     * @param options.mute Optional boolean value to specify whether to mute or unmute the current bot user\n     */\n    public async connect(options: VoiceChannelOptions): Promise<void> {\n        let { guildId, channelId, deaf, mute } = options;\n        if (typeof deaf === undefined) deaf = true;\n        if (typeof mute === undefined) mute = false;\n\n        this.state = State.CONNECTING;\n        this.send({ guild_id: guildId, channel_id: channelId, self_deaf: deaf, self_mute: mute }, false);\n        this.player.node.emit('debug', this.player.node.name, `[Voice] -> [Discord] : Requesting Connection | Guild: ${this.guildId}`);\n\n        const controller = new AbortController();\n        const timeout = setTimeout(() => controller.abort(), 15000);\n\n        try {\n            const [status] = await once(this, 'connectionUpdate', { signal: controller.signal });\n            if (status !== VoiceState.SESSION_READY) {\n                if (status === VoiceState.SESSION_ID_MISSING)\n                    throw new Error('The voice connection is not established due to missing session id');\n                else\n                    throw new Error('The voice connection is not established due to missing connection endpoint');\n            }\n            this.state = State.CONNECTED;\n        } catch (error: any) {\n            this.player.node.emit('debug', this.player.node.name, `[Voice] </- [Discord] : Request Connection Failed | Guild: ${this.guildId}`);\n            if (error.name === 'AbortError')\n                throw new Error('The voice connection is not established in 15 seconds');\n            throw error;\n        } finally {\n            clearTimeout(timeout);\n        }\n    }\n\n    /**\n     * Update Session ID, Channel ID, Deafen status and Mute status of this instance\n     *\n     * @param options.session_id ID of this session\n     * @param options.channel_id ID of currently connected voice channel\n     * @param options.self_deaf Boolean that indicates if the current bot user is deafened or not\n     * @param options.self_mute Boolean that indicates if the current bot user is muted or not\n     * @internal\n     */\n    public setStateUpdate(options: StateUpdatePartial): void {\n        const { session_id, channel_id, self_deaf, self_mute } = options;\n        if (this.channelId && (channel_id && this.channelId !== channel_id)) {\n            this.moved = true;\n            this.player.node.emit('debug', this.player.node.name, `[Voice] <- [Discord] : Channel Moved | Old Channel: ${this.channelId} Guild: ${this.guildId}`);\n        }\n\n        this.channelId = channel_id || this.channelId;\n        if (!channel_id) {\n            this.state = State.DISCONNECTED;\n            this.player.node.emit('debug', this.player.node.name, `[Voice] <- [Discord] : Channel Disconnected | Guild: ${this.guildId}`);\n        }\n\n        this.deafened = self_deaf;\n        this.muted = self_mute;\n        this.sessionId = session_id || null;\n        this.player.node.emit('debug', this.player.node.name, `[Voice] <- [Discord] : State Update Received | Channel: ${this.channelId} Session ID: ${session_id} Guild: ${this.guildId}`);\n    }\n\n    /**\n     * Send voiceUpdate event to Lavalink and also cache the serverUpdate event from Discord\n     * @internal\n     */\n    public setServerUpdate(data: ServerUpdate): void {\n        if (!data.endpoint) {\n            this.emit('connectionUpdate', VoiceState.SESSION_ENDPOINT_MISSING);\n            return;\n        }\n\n        if (!this.sessionId) {\n            this.emit('connectionUpdate', VoiceState.SESSION_ID_MISSING);\n            return;\n        }\n\n        if (this.region && !data.endpoint.startsWith(this.region)) {\n            this.moved = true;\n            this.player.node.emit('debug', this.player.node.name, `[Voice] <- [Discord] : Voice Region Moved | Old Region: ${this.region} Guild: ${this.guildId}`);\n        }\n\n        this.region = data.endpoint.split('.').shift()?.replace(/[0-9]/g, '') || null;\n        this.serverUpdate = data;\n        this.player.node.queue.add({ op: OPCodes.VOICE_UPDATE, guildId: this.guildId, sessionId: this.sessionId, event: this.serverUpdate });\n        this.player.node.emit('debug', this.player.node.name, `[Voice] <- [Discord] : Server Update, Voice Update Sent | Server: ${this.region} Guild: ${this.guildId}`);\n        this.emit('connectionUpdate', VoiceState.SESSION_READY);\n    }\n\n    /**\n     * Send voiceUpdate to Lavalink again\n     * @internal\n     */\n    public resendServerUpdate(): void {\n        if (!this.serverUpdate) return;\n        this.player.node.queue.add({ op: OPCodes.VOICE_UPDATE, guildId: this.guildId, sessionId: this.sessionId, event: this.serverUpdate });\n        this.player.node.emit('debug', this.player.node.name, `[Voice] <- [Discord] : Server Update, Voice Update Resent! | Server: ${this.region} Guild: ${this.guildId}`);\n    }\n\n    /**\n     * Destroy the current Lavalink player\n     */\n    public destroyLavalinkPlayer(): void {\n        this.player.node.queue.add({ op: OPCodes.DESTROY, guildId: this.guildId });\n        this.player.node.emit('debug', this.player.node.name, `[Voice] -> [Discord] : Destroyed the player on Lavalink | Server: ${this.region} Guild: ${this.guildId}`);\n    }\n\n    /**\n     * Send data to Discord\n     * @param data The data to send\n     * @param important Whether to prioritize sending this packet in the queue\n     * @internal\n     */\n    private send(data: any, important = false): void {\n        this.player.node.manager.connector.sendPacket(this.shardId, { op: 4, d: data }, important);\n    }\n}\n","import { EventEmitter } from 'events';\nimport { Node, VoiceChannelOptions } from '../node/Node';\nimport { mergeDefault } from '../Utils';\nimport { OPCodes, State } from '../Constants';\nimport { Connection } from './Connection';\n\nexport type TrackEndReason = 'FINISHED' | 'LOAD_FAILED' | 'STOPPED' | 'REPLACED' | 'CLEANUP';\nexport type Severity = 'COMMON' | 'SUSPICIOUS' | 'FAULT';\nexport type PlayerEventType = 'TrackStartEvent' | 'TrackEndEvent' | 'TrackExceptionEvent' | 'TrackStuckEvent' | 'WebSocketClosedEvent';\n\n/**\n * Options when playing a new track\n */\nexport interface PlayOptions {\n    track: string;\n    options?: {\n        noReplace?: boolean;\n        pause?: boolean;\n        startTime?: number;\n        endTime?: number;\n    }\n}\n\nexport interface PlayPayload {\n    op: string;\n    guildId: string;\n    track: string;\n    noReplace: boolean;\n    pause: boolean;\n    startTime?: number;\n    endTime?: number;\n}\n\nexport interface ResumeOptions {\n    noReplace?: boolean;\n    pause?: boolean;\n    startTime?: number;\n    endtime?: number;\n}\n\nexport interface Band {\n    band: number;\n    gain: number;\n}\n\nexport interface KaraokeSettings {\n    level?: number;\n    monoLevel?: number;\n    filterBand?: number;\n    filterWidth?: number;\n}\n\nexport interface TimescaleSettings {\n    speed?: number;\n    pitch?: number;\n    rate?: number;\n}\n\nexport interface FreqSettings {\n    frequency?: number;\n    depth?: number;\n}\n\nexport interface RotationSettings {\n    rotationHz?: number;\n}\n\nexport interface DistortionSettings {\n    sinOffset?: number;\n    sinScale?: number;\n    cosOffset?: number;\n    cosScale?: number;\n    tanOffset?: number;\n    tanScale?: number;\n    offset?: number;\n    scale?: number;\n}\n\nexport interface ChannelMixSettings {\n    leftToLeft?: number;\n    leftToRight?: number;\n    rightToLeft?: number;\n    rightToRight?: number;\n}\n\nexport interface LowPassSettings {\n    smoothing?: number\n}\n\nexport interface PlayerEvent {\n    op: OPCodes.EVENT;\n    type: PlayerEventType;\n    guildId: string;\n}\n\nexport interface Exception {\n    severity: Severity;\n    message: string;\n    cause: string;\n}\n\nexport interface TrackStartEvent extends PlayerEvent {\n    type: 'TrackStartEvent';\n    track: string;\n}\n\nexport interface TrackEndEvent extends PlayerEvent {\n    type: 'TrackEndEvent';\n    track: string;\n    reason: TrackEndReason;\n}\n\nexport interface TrackStuckEvent extends PlayerEvent {\n    type: 'TrackStuckEvent';\n    track: string;\n    thresholdMs: number;\n}\n\nexport interface TrackExceptionEvent extends PlayerEvent {\n    type: 'TrackExceptionEvent';\n    exception?: Exception;\n    error: string;\n}\n\nexport interface TrackStuckEvent extends PlayerEvent {\n    type: 'TrackStuckEvent';\n    thresholdMs: number;\n}\n\nexport interface WebSocketClosedEvent extends PlayerEvent {\n    type: 'WebSocketClosedEvent';\n    code: number;\n    byRemote: boolean;\n    reason: string;\n}\n\nexport interface PlayerUpdate {\n    op: OPCodes.PLAYER_UPDATE;\n    state: {\n      connected: boolean;\n      position?: number;\n      time: number;\n    };\n    guildId: string;\n}\n\nexport interface FilterOptions {\n    volume?: number;\n    equalizer?: Band[];\n    karaoke?: KaraokeSettings|null;\n    timescale?: TimescaleSettings|null;\n    tremolo?: FreqSettings|null;\n    vibrato?: FreqSettings|null;\n    rotation?: RotationSettings|null;\n    distortion?: DistortionSettings|null;\n    channelMix?: ChannelMixSettings|null;\n    lowPass?: LowPassSettings|null;\n}\n\n/**\n * Lavalink filters\n */\nexport class Filters {\n    public volume: number;\n    public equalizer: Band[];\n    public karaoke: KaraokeSettings|null;\n    public timescale: TimescaleSettings|null;\n    public tremolo: FreqSettings|null;\n    public vibrato: FreqSettings|null;\n    public rotation: RotationSettings|null;\n    public distortion: DistortionSettings|null;\n    public channelMix: ChannelMixSettings|null;\n    public lowPass: LowPassSettings|null;\n    /**\n     * Options to initialize this filters instance with\n     * @param options.volume The volume to play audio at as a decimal\n     * @param options.equalizer An array of objects that conforms to the Bands type that define volumes at different frequencies\n     * @param options.karaoke An object that conforms to the KaraokeSettings type that defines a range of frequencies to mute\n     * @param options.timescale An object that conforms to the TimescaleSettings type that defines the time signature to play the audio at\n     * @param options.tremolo An object that conforms to the FreqSettings type that defines an ocillation in volume\n     * @param options.vibrato An object that conforms to the FreqSettings type that defines an ocillation in pitch\n     * @param options.rotation An object that conforms to the RotationSettings type that defines the frequency of audio rotating round the listener\n     * @param options.distortion An object that conforms to DistortionSettings that defines distortions in the audio\n     * @param options.channelMix An object that conforms to ChannelMixSettings that defines how much the left and right channels affect each other (setting all factors to 0.5 causes both channels to get the same audio)\n     * @param options.lowPass An object that conforms to LowPassSettings that defines the amount of suppression on higher frequencies\n     */\n    constructor(options: FilterOptions = {}) {\n        this.volume = options.volume ?? 1.0;\n        this.equalizer = options.equalizer || [];\n        this.karaoke = options.karaoke || null;\n        this.timescale = options.timescale || null;\n        this.tremolo = options.tremolo || null;\n        this.vibrato = options.vibrato || null;\n        this.rotation = options.rotation || null;\n        this.distortion = options.distortion || null;\n        this.channelMix = options.channelMix || null;\n        this.lowPass = options.lowPass || null;\n    }\n}\n\nexport declare interface Player {\n    /**\n     * Emitted when the current playing track ends\n     * @eventProperty\n     */\n    on(event: 'end', listener: (reason: TrackEndEvent) => void): this;\n    /**\n     * Emitted when the current playing track gets stuck due to an error\n     * @eventProperty\n     */\n    on(event: 'stuck', listener: (data: TrackStuckEvent) => void): this;\n    /**\n     * Emitted when the current websocket connection is closed\n     * @eventProperty\n     */\n    on(event: 'closed', listener: (reason: WebSocketClosedEvent) => void): this;\n    /**\n     * Emitted when a new track starts\n     * @eventProperty\n     */\n    on(event: 'start', listener: (data: TrackStartEvent) => void): this;\n    /**\n     * Emitted when there is an error caused by the current playing track\n     * @eventProperty\n     */\n    on(event: 'exception', listener: (reason: TrackExceptionEvent) => void): this;\n    /**\n     * Emitted when the library manages to resume the player\n     * @eventProperty\n     */\n    on(event: 'resumed', listener: () => void): this;\n    /**\n     * Emitted when a playerUpdate even is recieved from Lavalink\n     * @eventProperty\n     */\n    on(event: 'update', listener: (data: PlayerUpdate) => void): this;\n    once(event: 'end', listener: (reason: TrackEndEvent) => void): this;\n    once(event: 'stuck', listener: (data: TrackStuckEvent) => void): this;\n    once(event: 'closed', listener: (reason: WebSocketClosedEvent) => void): this;\n    once(event: 'start', listener: (data: TrackStartEvent) => void): this;\n    once(event: 'exception', listener: (reason: TrackExceptionEvent) => void): this;\n    once(event: 'resumed', listener: () => void): this;\n    once(event: 'update', listener: (data: PlayerUpdate) => void): this;\n    off(event: 'end', listener: (reason: TrackEndEvent) => void): this;\n    off(event: 'stuck', listener: (data: TrackStuckEvent) => void): this;\n    off(event: 'closed', listener: (reason: WebSocketClosedEvent) => void): this;\n    off(event: 'start', listener: (data: TrackStartEvent) => void): this;\n    off(event: 'exception', listener: (reason: TrackExceptionEvent) => void): this;\n    off(event: 'resumed', listener: () => void): this;\n    off(event: 'update', listener: (data: PlayerUpdate) => void): this;\n}\n\n/**\n * Wrapper object around Lavalink\n */\nexport class Player extends EventEmitter {\n    /**\n     * Lavalink node this player is connected to\n     */\n    public node: Node;\n    /**\n     * Discort voice channel that this player is connected to\n     */\n    public readonly connection: Connection;\n    /**\n     * ID of current track\n     */\n    public track: string|null;\n    /**\n     * Pause status in current player\n     */\n    public paused: boolean;\n    /**\n     * Ping represents the number of milliseconds between heartbeat and ack. Could be `-1` if not connected\n     */\n    public ping: number;\n    /**\n     * Position in ms of current track\n     */\n    public position: number;\n    /**\n     * Filters on current track\n     */\n    public filters: Filters;\n    /**\n     * @param node An instance of Node (Lavalink API wrapper)\n     * @param options.guildId Guild ID in which voice channel to connect to is located\n     * @param options.shardId Shard ID in which the guild exists\n     * @param options.channelId Channel ID of voice channel to connect to\n     * @param options.deaf Optional boolean value to specify whether to deafen the current bot user\n     * @param options.mute Optional boolean value to specify whether to mute the current bot user\n     */\n    constructor(node: Node, options: VoiceChannelOptions) {\n        super();\n        this.node = node;\n        this.connection = new Connection(this, options);\n        this.track = null;\n        this.paused = false;\n        this.position = 0;\n        this.ping = 0;\n        this.filters = new Filters();\n    }\n\n    /**\n     * Move player to another node\n     * @param name Name of node to move to\n     * @returns The current player instance\n     */\n    public move(name: string): Player {\n        const node = this.node.manager.nodes.get(name);\n        if (!node || node.name === this.node.name) return this;\n        if (node.state !== State.CONNECTED) throw new Error('The node you specified is not ready');\n\n        this.connection.destroyLavalinkPlayer();\n        this.node.players.delete(this.connection.guildId);\n        this.node = node;\n        this.node.players.set(this.connection.guildId, this);\n        this.connection.resendServerUpdate();\n        this.resume();\n        return this;\n    }\n\n    /**\n     * Play a new track\n     * @param playable Options for playing this track\n     * @returns The current player instance\n     */\n    public playTrack(playable: PlayOptions): Player {\n        const payload: PlayPayload = {\n            op: OPCodes.PLAY,\n            guildId: this.connection.guildId,\n            track: playable.track,\n            noReplace: playable.options?.noReplace ?? true,\n            pause: playable.options?.pause ?? false\n        };\n\n        if (playable.options?.startTime) payload.startTime = playable.options.startTime;\n        if (playable.options?.endTime) payload.endTime = playable.options.startTime;\n\n        this.node.queue.add(payload);\n        this.track = playable.track;\n        this.paused = playable.options?.pause ?? false;\n        this.position = 0;\n\n        return this;\n    }\n\n    /**\n     * Stop the currently playing track\n     * @returns The current player instance\n     */\n    public stopTrack(): Player {\n        this.position = 0;\n        this.node.queue.add({\n            op: OPCodes.STOP,\n            guildId: this.connection.guildId\n        });\n\n        return this;\n    }\n\n    /**\n     * Pause or unpause the currently playing track\n     * @param pause Boolean value to specify whether to pause or unpause the current bot user\n     * @returns The current player instance\n     */\n    public setPaused(pause = true): Player {\n        this.node.queue.add({\n            op: OPCodes.PAUSE,\n            guildId: this.connection.guildId,\n            pause\n        });\n\n        this.paused = pause;\n        return this;\n    }\n\n    /**\n     * Seek to a specific time in the currently playing track\n     * @param position Position to seek to in milliseconds\n     * @returns The current player instance\n     */\n    public seekTo(position: number): Player {\n        this.node.queue.add({\n            op: OPCodes.SEEK,\n            guildId: this.connection.guildId,\n            position\n        });\n\n        return this;\n    }\n\n    /**\n     * Change the volume of the currently playing track\n     * @param volume Target volume as a decimal\n     * @returns The current player instance\n     */\n    public setVolume(volume: number): Player {\n        volume = Math.min(5, Math.max(0, volume));\n        this.filters.volume = volume;\n        this.updateFilters();\n\n        return this;\n    }\n\n    /**\n     * Change the equalizer settings applied to the currently playing track\n     * @param bands An array of objects that conforms to the Bands type that define volumes at different frequencies\n     * @returns The current player instance\n     */\n    public setEqualizer(bands: Band[]): Player {\n        this.filters.equalizer = bands;\n        this.updateFilters();\n\n        return this;\n    }\n\n    /**\n     * Change the karaoke settings applied to the currently playing track\n     * @param karaoke An object that conforms to the KaraokeSettings type that defines a range of frequencies to mute\n     * @returns The current player instance\n     */\n    public setKaraoke(karaoke?: KaraokeSettings): Player {\n        this.filters.karaoke = karaoke|| null;\n        this.updateFilters();\n\n        return this;\n    }\n\n    /**\n     * Change the timescale settings applied to the currently playing track\n     * @param timescale An object that conforms to the TimescaleSettings type that defines the time signature to play the audio at\n     * @returns The current player instance\n     */\n    public setTimescale(timescale?: TimescaleSettings): Player {\n        this.filters.timescale = timescale || null;\n        this.updateFilters();\n\n        return this;\n    }\n\n    /**\n     * Change the tremolo settings applied to the currently playing track\n     * @param tremolo An object that conforms to the FreqSettings type that defines an ocillation in volume\n     * @returns The current player instance\n     */\n    public setTremolo(tremolo?: FreqSettings): Player {\n        this.filters.tremolo = tremolo || null;\n        this.updateFilters();\n\n        return this;\n    }\n\n    /**\n     * Change the vibrato settings applied to the currently playing track\n     * @param vibrato An object that conforms to the FreqSettings type that defines an ocillation in pitch\n     * @returns The current player instance\n     */\n    public setVibrato(vibrato?: FreqSettings): Player {\n        this.filters.vibrato = vibrato || null;\n        this.updateFilters();\n\n        return this;\n    }\n\n    /**\n     * Change the rotation settings applied to the currently playing track\n     * @param rotation An object that conforms to the RotationSettings type that defines the frequency of audio rotating round the listener\n     * @returns The current player instance\n     */\n    public setRotation(rotation?: RotationSettings): Player {\n        this.filters.rotation = rotation || null;\n        this.updateFilters();\n\n        return this;\n    }\n\n    /**\n     * Change the distortion settings applied to the currently playing track\n     * @param distortion An object that conforms to DistortionSettings that defines distortions in the audio\n     * @returns The current player instance\n     */\n    public setDistortion(distortion: DistortionSettings): Player {\n        this.filters.distortion = distortion || null;\n        this.updateFilters();\n\n        return this;\n    }\n\n    /**\n     * Change the channel mix settings applied to the currently playing track\n     * @param mix An object that conforms to ChannelMixSettings that defines how much the left and right channels affect each other (setting all factors to 0.5 causes both channels to get the same audio)\n     * @returns The current player instance\n     */\n    public setChannelMix(mix: ChannelMixSettings): Player {\n        this.filters.channelMix = mix || null;\n        this.updateFilters();\n\n        return this;\n    }\n\n    /**\n     * Change the low pass settings applied to the currently playing track\n     * @param pass An object that conforms to LowPassSettings that defines the amount of suppression on higher frequencies\n     * @returns The current player instance\n     */\n    public setLowPass(pass: LowPassSettings): Player {\n        this.filters.lowPass = pass || null;\n        this.updateFilters();\n\n        return this;\n    }\n\n    /**\n     * Change the all filter settings applied to the currently playing track\n     * @param options An object that conforms to FilterOptions that defines all filters to apply/modify\n     * @returns The current player instance\n     */\n    public setFilters(options: FilterOptions): Player {\n        this.filters = new Filters(options);\n        this.updateFilters();\n\n        return this;\n    }\n\n    /**\n     * Clear all filters applied to the currently playing track\n     * @returns The current player instance\n     */\n    public clearFilters(): Player {\n        this.filters = new Filters();\n        this.node.queue.add({\n            op: OPCodes.FILTERS,\n            guildId: this.connection.guildId\n        });\n\n        return this;\n    }\n\n    /**\n     * Resume the current track\n     * @param options An object that conforms to ResumeOptions that specify behavior on resuming\n     * @returns The current player instance\n     */\n    public resume(options: ResumeOptions = {}): Player {\n        this.updateFilters();\n        if (this.track) {\n            options = mergeDefault({ startTime: this.position, pause: this.paused }, options);\n            this.playTrack({ track: this.track, options });\n        }\n\n        this.emit('resumed');\n        return this;\n    }\n\n    /**\n     * Update all filters via the filters operation\n     * @internal\n     */\n    private updateFilters(): void {\n        const { volume, equalizer, karaoke, timescale, tremolo, vibrato, rotation, distortion, channelMix, lowPass } = this.filters;\n        this.node.queue.add({\n            op: OPCodes.FILTERS,\n            guildId: this.connection.guildId,\n            volume,\n            equalizer,\n            karaoke,\n            timescale,\n            tremolo,\n            vibrato,\n            rotation,\n            distortion,\n            channelMix,\n            lowPass\n        });\n    }\n\n    /**\n     * Remove all event listeners on this instance\n     * @internal\n     */\n    public clean(): void {\n        this.removeAllListeners();\n        this.reset();\n    }\n\n    /**\n     * Reset the track, position and filters on this instance to defaults\n     */\n    public reset(): void {\n        this.track = null;\n        this.position = 0;\n        this.filters = new Filters();\n    }\n\n    /**\n     * Handle JSON data recieved from Lavalink\n     * @param json JSON data from Lavalink\n     * @internal\n     */\n    public onLavalinkMessage(json: any): void {\n        if (json.op === OPCodes.PLAYER_UPDATE) {\n            this.position = json.state.position;\n            // ping property require lavalink >=3.5.1\n            this.ping = json.state.ping ?? 0;\n            this.emit('update', json);\n        } else if (json.op === OPCodes.EVENT)\n            this.onPlayerEvent(json);\n        else {\n            this.node.emit('debug', this.node.name, `[Player] -> [Node] : Unknown Message OP ${json.op} | Guild: ${this.connection.guildId}`);\n        }\n    }\n\n    /**\n     * Handle player events recieved from Lavalink\n     * @param json JSON data from Lavalink\n     * @internal\n     */\n    private onPlayerEvent(json: any): void {\n        switch (json.type) {\n        case 'TrackStartEvent':\n            this.position = 0;\n            this.emit('start', json);\n            break;\n        case 'TrackEndEvent':\n            this.emit('end', json);\n            break;\n        case 'TrackStuckEvent':\n            this.emit('stuck', json);\n            break;\n        case 'TrackExceptionEvent':\n            this.emit('exception', json);\n            break;\n        case 'WebSocketClosedEvent':\n            if (!this.connection.reconnecting) {\n                if (!this.connection.moved)\n                    this.emit('closed', json);\n                else\n                    this.connection.moved = false;\n            }\n            break;\n        default:\n            this.node.emit(\n                'debug',\n                this.node.name,\n                `[Player] -> [Node] : Unknown Player Event Type ${json.type} | Guild: ${this.connection.guildId}`\n            );\n        }\n    }\n}\n","import { EventEmitter } from 'events';\nimport { IncomingMessage } from 'http';\nimport { NodeOption, Shoukaku } from '../Shoukaku';\nimport { Player } from '../guild/Player';\nimport { OPCodes, State } from '../Constants';\nimport { Queue } from './Queue';\nimport { Rest } from './Rest';\nimport Websocket from 'ws';\n\nexport interface VoiceChannelOptions {\n    guildId: string;\n    shardId: number;\n    channelId: string;\n    deaf?: boolean;\n    mute?: boolean;\n}\n\nexport interface NodeStats {\n    players: number;\n    playingPlayers: number;\n    memory: {\n        reservable: number;\n        used: number;\n        free: number;\n        allocated: number\n    };\n    frameStats: {\n        sent: number;\n        deficit: number;\n        nulled: number\n    };\n    cpu: {\n        cores: number;\n        systemLoad: number;\n        lavalinkLoad: number;\n    };\n    uptime: number;\n}\n\nexport interface ResumableHeaders {\n    [key: string]: string;\n    'Client-Name': string;\n    'User-Agent': string;\n    'Authorization': string;\n    'User-Id': string;\n    'Resume-Key': string;\n}\n\nexport interface NonResumableHeaders {\n    [key: string]: string;\n    'Client-Name': string;\n    'User-Agent': string;\n    'Authorization': string;\n    'User-Id': string;\n}\n\n/**\n * Represents a Lavalink node\n */\nexport class Node extends EventEmitter {\n    /**\n     * Shoukaku class\n     */\n    public readonly manager: Shoukaku;\n    /**\n     * A map of guild ID to players\n     */\n    public readonly players: Map<string, Player>;\n    /**\n     * Lavalink rest API\n     */\n    public readonly rest: Rest;\n    /**\n     * Lavalink API message queue\n     */\n    public readonly queue: Queue;\n    /**\n     * Name of this node\n     */\n    public readonly name: string;\n    /**\n     * Group in which this node is contained\n     */\n    public readonly group?: string;\n    /**\n     * URL of Lavalink\n     */\n    private readonly url: string;\n    /**\n     * Credentials to access Lavalink\n     */\n    private readonly auth: string;\n    /**\n     * The number of reconnects to Lavalink\n     */\n    public reconnects: number;\n    /**\n     * The state of this connection\n     */\n    public state: State;\n    /**\n     * Statistics from Lavalink\n     */\n    public stats: NodeStats|null;\n    /**\n     * Websocket instance\n     */\n    public ws: Websocket|null;\n    /**\n     * Boolean that represents if the node has initialized once (will always be true when alwaysSendResumeKey is true)\n     */\n    protected initialized: boolean;\n    /**\n     * Boolean that represents if this connection is destroyed\n     */\n    protected destroyed: boolean;\n    /**\n     * @param manager Shoukaku instance\n     * @param options.name Name of this node\n     * @param options.url URL of Lavalink\n     * @param options.auth Credentials to access Lavalnk\n     * @param options.secure Whether to use secure protocols or not\n     * @param options.group Group of this node\n     */\n    constructor(manager: Shoukaku, options: NodeOption) {\n        super();\n        this.manager = manager;\n        this.players = new Map();\n        this.rest = new (this.manager.options.structures.rest || Rest)(this, options);\n        this.queue = new Queue(this);\n        this.name = options.name;\n        this.group = options.group;\n        this.url = `${options.secure ? 'wss' : 'ws'}://${options.url}`;\n        this.auth = options.auth;\n        this.reconnects = 0;\n        this.state = State.DISCONNECTED;\n        this.stats = null;\n        this.ws = null;\n        this.initialized = this.manager.options.alwaysSendResumeKey ?? false;\n        this.destroyed = false;\n    }\n\n    /**\n     * Penalties for load balancing\n     * @returns Penalty score\n     * @internal @readonly\n     */\n    get penalties(): number {\n        let penalties = 0;\n        if (!this.stats) return penalties;\n\n        penalties += this.stats.players;\n        penalties += Math.round(Math.pow(1.05, 100 * this.stats.cpu.systemLoad) * 10 - 10);\n\n        if (this.stats.frameStats) {\n            penalties += this.stats.frameStats.deficit;\n            penalties += this.stats.frameStats.nulled * 2;\n        }\n\n        return penalties;\n    }\n\n    /**\n     * Connect to Lavalink\n     */\n    public connect(): void {\n        if (!this.manager.id) throw new Error('Don\\'t connect a node when the library is not yet ready');\n        if (this.destroyed) throw new Error('You can\\'t re-use the same instance of a node once disconnected, please re-add the node again');\n\n        const resume = this.initialized && (this.manager.options.resume && this.manager.options.resumeKey);\n        this.state = State.CONNECTING;\n        let headers: ResumableHeaders|NonResumableHeaders;\n\n        if (resume) {\n            headers = {\n                'Client-Name': this.manager.options.userAgent,\n                'User-Agent': this.manager.options.userAgent,\n                'Authorization': this.auth,\n                'User-Id': this.manager.id,\n                'Resume-Key': this.manager.options.resumeKey\n            };\n        } else {\n            headers = {\n                'Client-Name': this.manager.options.userAgent,\n                'User-Agent': this.manager.options.userAgent,\n                'Authorization': this.auth,\n                'User-Id': this.manager.id\n            };\n        }\n\n        this.emit('debug', this.name, `[Socket] -> [${this.name}] : Connecting ${this.url}, Trying to resume? ${resume}`);\n\n        if (!this.initialized) this.initialized = true;\n\n        this.ws = new Websocket(this.url, { headers } as Websocket.ClientOptions);\n        this.ws.once('upgrade', response => this.ws!.once('open', () => this.open(response)));\n        this.ws.once('close', (...args) => this.close(...args));\n        this.ws.on('error', error => this.emit('error', this.name, error));\n        this.ws.on('message', data => this.message(data));\n    }\n\n    /**\n     * Disconnect from lavalink\n     * @param code Status code\n     * @param reason Reason for disconnect\n     */\n    public disconnect(code: number, reason?:string): void {\n        if (this.destroyed) return;\n\n        this.destroyed = true;\n        this.state = State.DISCONNECTING;\n        this.clean();\n        this.queue.flush(code, reason);\n    }\n\n    /**\n     * Join a voice channel in a guild\n     * @param options.guildId Guild ID in which voice channel to connect to is located\n     * @param options.shardId Shard ID in which the guild exists\n     * @param options.channelId Channel ID of voice channel to connect to\n     * @param options.deaf Optional boolean value to specify whether to deafen the current bot user\n     * @param options.mute Optional boolean value to specify whether to mute the current bot user\n     * @returns A promise that resolves to a player class\n     */\n    public async joinChannel(options: VoiceChannelOptions): Promise<Player> {\n        if (this.state !== State.CONNECTED)\n            throw new Error('This node is not yet ready');\n        let player = this.players.get(options.guildId);\n        if (player?.connection.state === State.CONNECTING)\n            throw new Error('Can\\'t join this channel. This connection is connecting');\n        if (player?.connection.state === State.CONNECTED)\n            throw new Error('Can\\'t join this channel. This connection is already connected');\n        if (player?.connection.reconnecting)\n            throw new Error('Can\\'t join this channel. This connection is currently force-reconnecting');\n        try {\n            if (!player) {\n                if (this.manager.options.structures.player) {\n                    player = new this.manager.options.structures.player(this, options);\n                } else {\n                    player = new Player(this, options);\n                }\n                this.players.set(options.guildId, player!);\n            }\n            await player!.connection.connect(options);\n            return player!;\n        } catch (error) {\n            this.players.delete(options.guildId);\n            throw error;\n        }\n    }\n\n    /**\n     * Disconnect from connected voice channel\n     * @param guildId ID of guild that contains voice channel\n     */\n    public leaveChannel(guildId: string): void {\n        this.players.get(guildId)?.connection.disconnect();\n    }\n\n    /**\n     * Handle connection open event from Lavalink\n     * @param response Response from Lavalink\n     * @param reconnect Whether to reconnect on failure\n     * @internal\n     */\n    private open(response: IncomingMessage): void {\n        const resumed = response.headers['session-resumed'] === 'true';\n        this.queue.add();\n\n        if (this.manager.options.resume && this.manager.options.resumeKey) {\n            this.queue.add({\n                op: OPCodes.CONFIGURE_RESUMING,\n                key: this.manager.options.resumeKey,\n                timeout: this.manager.options.resumeTimeout\n            });\n            this.emit('debug', this.name, `[Socket] -> [${this.name}] : Resuming configured on Lavalink`);\n        }\n\n        const resumeByLibrary = this.initialized && (this.manager.options.resumeByLibrary && this.players.size);\n        if (!resumed && resumeByLibrary) {\n            for (const player of [...this.players.values()]) {\n                player.connection.resendServerUpdate();\n                player.resume();\n            }\n        }\n\n        this.emit('debug', this.name, `[Socket] <-> [${this.name}] : Connection ready ${this.url} | Lavalink Resumed: ${resumed} | Shoukaku Resumed: ${resumeByLibrary}`);\n        this.reconnects = 0;\n        this.state = State.CONNECTED;\n        this.emit('ready', this.name,  resumed || resumeByLibrary);\n    }\n\n    /**\n     * Handle message from Lavalink\n     * @param message JSON message\n     * @internal\n     */\n    private message(message: any): void {\n        const json = JSON.parse(message);\n        if (!json) return;\n        this.emit('raw', this.name, json);\n        if (json.op === OPCodes.STATS) {\n            this.emit('debug', this.name, `[Socket] <- [${this.name}] : Node Status Update | Server Load: ${this.penalties}`);\n            this.stats = json;\n            return;\n        }\n\n        this.players.get(json.guildId)?.onLavalinkMessage(json);\n    }\n\n    /**\n     * Handle closed event from lavalink\n     * @param code Status close\n     * @param reason Reason for connection close\n     */\n    private close(code: number, reason: Buffer): void {\n        this.destroy();\n        this.emit('debug', this.name, `[Socket] <-/-> [${this.name}] : Connection Closed, Code: ${code || 'Unknown Code'}`);\n        this.emit('close', this.name, code, reason);\n        if (this.destroyed || this.reconnects >= this.manager.options.reconnectTries)\n            this.clean();\n        else\n            this.reconnect();\n    }\n    /**\n     * Destroys the websocket connection\n     * @internal\n     */\n    private destroy() {\n        this.ws?.removeAllListeners();\n        this.ws?.close();\n        this.ws = null;\n        this.state = State.DISCONNECTED;\n    }\n\n    /**\n     * Clear message queue and move players to other nodes if possible\n     * @internal\n     */\n    private clean(): void {\n        const players = [...this.players.values()];\n        const move = this.manager.options.moveOnDisconnect && [...this.manager.nodes.values()].filter(node => node.group === this.group).length > 1;\n\n        for (const player of players) {\n            if (!move) {\n                player.connection.disconnect();\n                continue;\n            }\n\n            const name = this.group ? [this.group] : 'auto';\n            const node = this.manager.getNode(name);\n\n            if (!node) {\n                player.connection.disconnect();\n                continue;\n            }\n\n            player.move(node.name);\n        }\n\n        this.queue.clear();\n        this.manager.nodes.delete(this.name);\n        this.emit('disconnect', this.name, players, players.length > 0 && move);\n    }\n\n    /**\n     * Reconnect to Lavalink\n     * @internal\n     */\n    private reconnect(): void {\n        if (this.state !== State.DISCONNECTED) this.destroy();\n\n        this.reconnects++;\n        this.emit('reconnecting', this.name, `[Socket] -> [${this.name}] : Reconnecting in ${this.manager.options.reconnectInterval}ms. ${this.manager.options.reconnectTries - this.reconnects} tries left`, this.reconnect, this.manager.options.reconnectInterval, this.manager.options.reconnectTries - this.reconnects);\n        this.emit('debug', this.name, `[Socket] -> [${this.name}] : Reconnecting in ${this.manager.options.reconnectInterval}ms. ${this.manager.options.reconnectTries - this.reconnects} tries left`);\n        setTimeout(() => this.connect(), this.manager.options.reconnectInterval);\n    }\n\n    /**\n     * Handle raw message from Discord\n     * @param packet Packet data\n     * @internal\n     */\n    public discordRaw(packet: any): void {\n        const player = this.players.get(packet.d.guild_id);\n\n        if (!player) return;\n        if (packet.t === 'VOICE_SERVER_UPDATE') {\n            player.connection.setServerUpdate(packet.d);\n            return;\n        }\n\n        if (packet.d.user_id !== this.manager.id) return;\n        player.connection.setStateUpdate(packet.d);\n    }\n}\n","import Websocket from 'ws';\nimport { Node } from './Node';\n\n/**\n * Represents a message queue\n * @internal\n */\nexport class Queue {\n    /**\n     * Node that initalized this message queue\n     */\n    private readonly node: Node;\n    /**\n     * Pending messages\n     */\n    public readonly pending: string[];\n    /**\n     * Number of flushes in this queue\n     */\n    private flushes: number;\n    /**\n     * @param node An instance of Node\n     */\n    constructor(node: Node) {\n        this.node = node;\n        this.pending = [];\n        this.flushes = 0;\n    }\n\n    /**\n     * Add data to queue\n     * @param data Message data\n     * @param important Priority status\n     * @internal\n     */\n    public add(data?: any, important = false): void {\n        if (data) this.pending[important ? 'unshift' : 'push'](JSON.stringify(data));\n        this.process();\n    }\n\n    /**\n     * Clear the queue\n     * @internal\n     */\n    public clear(): void {\n        this.pending.length = 0;\n    }\n\n    /**\n     * Flush the ws connections in queue\n     * @param code Status code\n     * @param reason Reason for close\n     * @internal\n     */\n    public flush(code: number, reason?: string): void {\n        if (!this.pending.length || this.flushes > 10) {\n            this.flushes = 0;\n            this.clear();\n            this.node.ws?.close(code, reason);\n            return;\n        }\n\n        this.flushes++;\n        setTimeout(() => this.flush(code, reason), 1000);\n    }\n\n    /**\n     * Process messages in the queue\n     * @internal\n     */\n    protected process(): void {\n        if (!this.node.ws || this.node.ws.readyState !== Websocket.OPEN || !this.pending.length) return;\n\n        while(this.pending.length) {\n            const message = this.pending.shift();\n            if (!message) return;\n            this.node.ws.send(message);\n        }\n    }\n}\n","import { Node } from './Node';\nimport { NodeOption } from '../Shoukaku';\nimport Fetch from 'node-fetch';\n\nexport type LoadType = 'TRACK_LOADED' | 'PLAYLIST_LOADED' | 'SEARCH_RESULT' | 'NO_MATCHES' | 'LOAD_FAILED';\n\ninterface FetchOptions {\n    endpoint: string;\n    options: {\n        headers?: Record<string, string>;\n        params?: Record<string, string>;\n        method?: string;\n        body?: Record<string, unknown>;\n        [key: string]: unknown;\n    };\n}\n\nexport interface Track {\n    track: string;\n    info: {\n        identifier: string;\n        isSeekable: boolean;\n        author: string;\n        length: number;\n        isStream: boolean;\n        position: number;\n        title: string;\n        uri: string;\n        sourceName: string;\n    }\n}\n\nexport interface LavalinkResponse {\n    loadType: LoadType;\n    playlistInfo: {\n        name?: string;\n        selectedTrack?: number;\n    }\n    tracks: Track[]\n}\n\nexport interface Address {\n    address: string;\n    failingTimestamp: number;\n    failingTime: string;\n}\n\nexport interface RoutePlanner {\n    class?: string;\n    details?: {\n        ipBlock: {\n            type: string;\n            size: string;\n        },\n        failingAddresses: Address[]\n    }\n    rotateIndex?: string;\n    ipIndex?: string;\n    currentAddress?: string;\n    blockIndex?: string;\n    currentAddressIndex?: string;\n}\n\n/**\n * Wrapper around Lavalink REST API\n */\nexport class Rest {\n    /**\n     * Node that initialized this instance\n     */\n    protected readonly node: Node;\n    /**\n     * URL of Lavalink\n     */\n    protected readonly url: string;\n    /**\n     * Credentials to access Lavalink\n     */\n    protected readonly auth: string;\n    /**\n     * @param node An instance of Node\n     * @param options.name Name of this node\n     * @param options.url URL of Lavalink\n     * @param options.auth Credentials to access Lavalnk\n     * @param options.secure Weather to use secure protocols or not\n     * @param options.group Group of this node\n     */\n    constructor(node: Node, options: NodeOption) {\n        this.node = node;\n        this.url = `${options.secure ? 'https' : 'http'}://${options.url}`;\n        this.auth = options.auth;\n    }\n\n    /**\n     * Resolve a track\n     * @param identifier Track ID\n     * @returns A promise that resolves to a Lavalink response or void\n     */\n    public resolve(identifier: string): Promise<LavalinkResponse | null> {\n        const options = {\n            endpoint: '/loadtracks',\n            options: { params: { identifier }}\n        };\n\n        return this.fetch<LavalinkResponse>(options);\n    }\n\n    /**\n     * Decode a track\n     * @param track Encoded track\n     * @returns Promise that resolves to a track or void\n     */\n    public decode(track: string): Promise<Track | null> {\n        const options = {\n            endpoint: '/decodetrack',\n            options: { params: { track }}\n        };\n\n        return this.fetch<Track>(options);\n    }\n\n    /**\n     * Get routplanner status from Lavalink\n     * @returns Promise that resolves to a routeplanner response or void\n     * @internal\n     */\n    public getRoutePlannerStatus(): Promise<RoutePlanner | null> {\n        const options = {\n            endpoint: '/routeplanner/status',\n            options: {}\n        };\n\n        return this.fetch<RoutePlanner>(options);\n    }\n\n    /**\n     * Release blacklisted IP address into pool of IPs\n     * @param address IP address\n     * @internal\n     */\n    public unmarkFailedAddress(address: string): Promise<void | null> {\n        const options = {\n            endpoint: '/routeplanner/free/address',\n            options: {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: { address }\n            }\n        };\n\n        return this.fetch<void>(options);\n    }\n\n    /**\n     * Make a request to Lavalink\n     * @param fetchOptions.endpoint Lavalink endpoint\n     * @param fetchOptions.options Options passed to fetch\n     * @internal\n     */\n    private async fetch<T = unknown>(fetchOptions: FetchOptions) {\n        const { endpoint, options } = fetchOptions;\n        let headers = {\n            'Authorization': this.auth,\n            'User-Agent': this.node.manager.options.userAgent\n        };\n\n        if (options.headers) headers = { ...headers, ...options.headers };\n\n        const url = new URL(`${this.url}${endpoint}`);\n        if (options.params) url.search = new URLSearchParams(options.params).toString();\n\n        const abortController = new AbortController();\n        const timeout = setTimeout(() => abortController.abort(), this.node.manager.options.restTimeout || 15000);\n\n        const request = await Fetch(url.toString(), {\n            method: options.method?.toUpperCase() || 'GET',\n            headers,\n            ...((['GET', 'HEAD'].includes(options.method?.toUpperCase() || 'GET')) && options.body ? { body: JSON.stringify(options.body ?? {}) } : {}),\n            // @ts-expect-error\n            signal: abortController.signal\n        })\n            .finally(() => clearTimeout(timeout));\n\n        if (!request.ok)\n            throw new Error(`Rest request failed with response code: ${request.status}`);\n\n        return await request.json() as T;\n    }\n}\n","import { EventEmitter } from 'events';\nimport { State, ShoukakuDefaults } from './Constants';\nimport { Node } from './node/Node';\nimport { Connector } from './connectors/Connector';\nimport { Constructor, mergeDefault } from './Utils';\nimport { Player } from './guild/Player';\nimport { Rest } from './node/Rest';\n\nexport interface Structures {\n    /**\n     * A custom structure that extends the Rest class\n     */\n    rest?:  Constructor<Rest>;\n    /**\n     * A custom structure that extends the Player class\n     */\n    player?: Constructor<Player>;\n}\n\nexport interface NodeOption {\n    /**\n     * Name of this node\n     */\n    name: string;\n    /**\n     * URL of Lavalink\n     */\n    url: string;\n    /**\n     * Credentials to access Lavalnk\n     */\n    auth: string;\n    /**\n     * Whether to use secure protocols or not\n     */\n    secure?: boolean;\n    /**\n     * Group of this node\n     */\n    group?: string;\n}\n\nexport interface ShoukakuOptions {\n    /**\n     * Whether to resume a connection on disconnect to Lavalink (Server Side) (Note: DOES NOT RESUME WHEN THE LAVALINK SERVER DIES)\n     */\n    resume?: boolean;\n    /**\n     * Resume key for Lavalink\n     */\n    resumeKey?: string;\n    /**\n     * Time to wait before lavalink starts to destroy the players of the disconnected client\n     */\n    resumeTimeout?: number;\n    /**\n     * Whether to resume the players by doing it in the library side (Client Side) (Note: TRIES TO RESUME REGARDLESS OF WHAT HAPPENED ON A LAVALINK SERVER)\n     */\n    resumeByLibrary?: boolean;\n    /**\n     * Disables the first time initialization tracking of nodes, and just sends the resume key always (Note: Useful for people who save their players to redis and wants to resume sessions even at first boot)\n     */\n    alwaysSendResumeKey?: boolean;\n    /**\n     * Number of times to try and reconnect to Lavalink before giving up\n     */\n    reconnectTries?: number;\n    /**\n     * Timeout before trying to reconnect\n     */\n    reconnectInterval?: number;\n    /**\n     * Time to wait for a response from the Lavalink REST API before giving up\n     */\n    restTimeout?: number;\n    /**\n     * Whether to move players to a different Lavalink node when a node disconnects\n     */\n    moveOnDisconnect?: boolean;\n    /**\n     * User Agent to use when making requests to Lavalink\n     */\n    userAgent?: string;\n    /**\n     * Custom structures for shoukaku to use\n     */\n    structures?: Structures;\n}\n\nexport interface MergedShoukakuOptions {\n    resume: boolean;\n    resumeKey: string;\n    resumeTimeout: number;\n    resumeByLibrary: boolean;\n    alwaysSendResumeKey: boolean;\n    reconnectTries: number;\n    reconnectInterval: number;\n    restTimeout: number;\n    moveOnDisconnect: boolean;\n    userAgent: string;\n    structures: Structures;\n}\n\nexport declare interface Shoukaku {\n    /**\n     * Emitted when reconnect tries are occurring and how many tries are left\n     * @eventProperty\n     */\n    on(event: 'reconnecting', listener: (name: string, info: string, tries: number, triesLeft: number, reconnectInterval: number) => void): this;\n    /**\n     * Emitted when data useful for debugging is produced\n     * @eventProperty\n     */\n    on(event: 'debug', listener: (name: string, info: string) => void): this;\n    /**\n     * Emitted when an error occurs\n     * @eventProperty\n     */\n    on(event: 'error', listener: (name: string, error: Error) => void): this;\n    /**\n     * Emitted when Shoukaku is ready to recieve operations\n     * @eventProperty\n     */\n    on(event: 'ready', listener: (name: string, reconnected: boolean) => void): this;\n    /**\n     * Emitted when a websocket connection to Lavalink closes\n     * @eventProperty\n     */\n    on(event: 'close', listener: (name: string, code: number, reason: string) => void): this;\n    /**\n     * Emitted when a websocket connection to Lavalink disconnects\n     * @eventProperty\n     */\n    on(event: 'disconnect', listener: (name: string, players: Player[], moved: boolean) => void): this;\n    /**\n     * Emitted when a raw message is recived from Lavalink\n     * @eventProperty\n     */\n    on(event: 'raw', listener: (name: string, json: unknown) => void): this;\n    once(event: 'reconnecting', listener: (name: string, reconnectsLeft: number, reconnectInterval: number) => void): this;\n    once(event: 'debug', listener: (name: string, info: string) => void): this;\n    once(event: 'error', listener: (name: string, error: Error) => void): this;\n    once(event: 'ready', listener: (name: string, reconnected: boolean) => void): this;\n    once(event: 'close', listener: (name: string, code: number, reason: string) => void): this;\n    once(event: 'disconnect', listener: (name: string, players: Player[], moved: boolean) => void): this;\n    once(event: 'raw', listener: (name: string, json: unknown) => void): this;\n    off(event: 'reconnecting', listener: (name: string, reconnectsLeft: number, reconnectInterval: number) => void): this;\n    off(event: 'debug', listener: (name: string, info: string) => void): this;\n    off(event: 'error', listener: (name: string, error: Error) => void): this;\n    off(event: 'ready', listener: (name: string, reconnected: boolean) => void): this;\n    off(event: 'close', listener: (name: string, code: number, reason: string) => void): this;\n    off(event: 'disconnect', listener: (name: string, players: Player[], moved: boolean) => void): this;\n    off(event: 'raw', listener: (name: string, json: unknown) => void): this;\n}\n\n/**\n * Main Shoukaku class\n */\nexport class Shoukaku extends EventEmitter {\n    /**\n     * Discord library connector\n     */\n    public readonly connector: Connector;\n    /**\n     * Shoukaku options\n     */\n    public readonly options: MergedShoukakuOptions;\n    /**\n     * Connected Lavalink nodes\n     */\n    public readonly nodes: Map<string, Node>;\n    /**\n     * Shoukaku instance identifier\n     */\n    public id: string|null;\n    /**\n     * @param connector A Discord library connector\n     * @param nodes An array that conforms to the NodeOption type that specifies nodes to connect to\n     * @param options.resume Whether to resume a connection on disconnect to Lavalink (Server Side) (Note: DOES NOT RESUME WHEN THE LAVALINK SERVER DIES)\n     * @param options.resumeKey Resume key for Lavalink\n     * @param options.resumeTimeout Time to wait before lavalink starts to destroy the players of the disconnected client\n     * @param options.resumeByLibrary Whether to resume the players by doing it in the library side (Client Side) (Note: TRIES TO RESUME REGARDLESS OF WHAT HAPPENED ON A LAVALINK SERVER)\n     * @param options.alwaysSendResumeKey Disables the first time initialization tracking of nodes, and just sends the resume key always (Note: Useful for people who save their players to redis and wants to resume sessions even at first boot)\n     * @param options.reconnectTries Number of times to try and reconnect to Lavalink before giving up\n     * @param options.reconnectInterval Timeout before trying to reconnect\n     * @param options.restTimeout Time to wait for a response from the Lavalink REST API before giving up\n     * @param options.moveOnDisconnect Whether to move players to a different Lavalink node when a node disconnects\n     * @param options.userAgent User Agent to use when making requests to Lavalink\n     * @param options.structures Custom structures for shoukaku to use\n     */\n    constructor(connector: Connector, nodes: NodeOption[], options: ShoukakuOptions = {}) {\n        super();\n        this.connector = connector.set(this);\n        this.options = mergeDefault(ShoukakuDefaults, options);\n        this.nodes = new Map();\n        this.id = null;\n        this.connector.listen(nodes);\n    }\n\n    /**\n     * Get a list of players\n     * @returns A map of guild IDs and players\n     * @readonly\n     */\n    get players(): Map<string, Player> {\n        const players = new Map();\n        for (const node of this.nodes.values()) {\n            for (const [id, player] of node.players) players.set(id, player);\n        }\n        return players;\n    }\n\n    /**\n     * Add a Lavalink node to the pool of available nodes\n     * @param options.name Name of this node\n     * @param options.url URL of Lavalink\n     * @param options.auth Credentials to access Lavalnk\n     * @param options.secure Whether to use secure protocols or not\n     * @param options.group Group of this node\n     */\n    public addNode(options: NodeOption): void {\n        const node = new Node(this, options);\n        node.on('debug', (...args) => this.emit('debug', ...args));\n        node.on('reconnecting', (...args) => this.emit('reconnecting', ...args));\n        node.on('error', (...args) => this.emit('error', ...args));\n        node.on('close', (...args) => this.emit('close', ...args));\n        node.on('ready', (...args) => this.emit('ready', ...args));\n        node.on('raw', (...args) => this.emit('raw', ...args));\n        node.on('disconnect', (...args) => this.emit('disconnect', ...args));\n        node.connect();\n        this.nodes.set(node.name, node);\n    }\n\n    /**\n     * Remove a Lavalink node from the pool of available nodes\n     * @param name Name of the node\n     * @param reason Reason of removing the node\n     */\n    public removeNode(name: string, reason = 'Remove node executed'): void {\n        const node = this.nodes.get(name);\n        if (!node) throw new Error('The node name you specified doesn\\'t exist');\n        node.disconnect(1000, reason);\n        node.removeAllListeners();\n    }\n\n    /**\n     * Select a Lavalink node from the pool of nodes\n     * @param name A specific node, an array of nodes, or the string `auto`\n     * @returns A Lavalink node or undefined\n     */\n    public getNode(name: string|string[] = 'auto'): Node|undefined {\n        if (!this.nodes.size) throw new Error('No nodes available, please add a node first');\n        if (Array.isArray(name) || name === 'auto') return this.getIdeal(name);\n        const node = this.nodes.get(name);\n        if (!node) throw new Error('The node name you specified is not one of my nodes');\n        if (node.state !== State.CONNECTED) throw new Error('This node is not yet ready');\n        return node;\n    }\n\n    /**\n     * Get the Lavalink node the least penalty score\n     * @param group A group, an array of groups, or the string `auto`\n     * @returns A Lavalink node or undefined\n     * @internal\n     */\n    private getIdeal(group: string|string[]): Node|undefined {\n        const nodes = [...this.nodes.values()]\n            .filter(node => node.state === State.CONNECTED);\n        if (group === 'auto') {\n            return nodes\n                .sort((a, b) => a.penalties - b.penalties)\n                .shift();\n        }\n        return nodes\n            .filter(node => node.group && group.includes(node.group))\n            .sort((a, b) => a.penalties - b.penalties)\n            .shift();\n    }\n}\n"],"mappings":"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","names":["State","VoiceState","OPCodes","EventEmitter","EventEmitter","EventEmitter","Websocket","EventEmitter","EventEmitter","EventEmitter"]}